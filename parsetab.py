
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTGTleftPLUSMINUSleftTIMESDIVIDECOLON COMMA COUT CTEFLOAT CTEINT CTESTRING DIVIDE DO ELSE END EQUALS FLOAT GT ID IF INTEGER LBRACE LPAREN LT MINUS NE PLUS PROGRAM RBRACE RPAREN SCOLON TIMES VAR WHILE\n    programa : PROGRAM ID SCOLON vars body END\n    \n    vars : VAR typed_vars vars\n         | empty\n    \n    typed_vars : vars_list COLON type SCOLON typed_vars\n               | empty\n    \n    vars_list : ID \n              | ID COMMA vars_list\n    \n    type : INTEGER\n         | FLOAT\n    \n    body : LBRACE listofstatements RBRACE\n    \n    listofstatements : statement listofstatements\n                     | empty\n    \n    statement : assign\n              | condition\n              | cycle\n              | print\n    \n    print :  COUT LPAREN listedexpr RPAREN SCOLON\n    \n    listedexpr :  c\n               |  c COMMA c m\n        \n    \n    c :  expr\n      |  relexpr\n      |  CTESTRING\n\n    \n    m :  COMMA c m\n      |  empty\n    \n    assign :  ID EQUALS expr SCOLON\n    \n    cycle :  DO body WHILE LPAREN relexpr RPAREN SCOLON\n    expr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE exprexpr : IDexpr : cteexpr : LPAREN expr RPARENrelexpr : expr LT expr\n               | expr GT expr\n               | expr EQUALS expr\n               | expr NE expr\n    condition : IF LPAREN relexpr RPAREN body ELSE body SCOLON\n              | IF LPAREN relexpr RPAREN body SCOLON\n    \n    cte : CTEINT\n        | CTEFLOAT\n    empty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,14,],[0,-1,]),'ID':([2,6,9,16,18,19,20,21,28,31,32,34,42,53,54,55,56,57,58,61,62,63,64,65,67,80,83,85,89,91,],[3,13,22,22,-13,-14,-15,-16,13,39,39,39,39,13,-25,39,39,39,39,39,39,39,39,39,39,-17,-39,39,-26,-38,]),'SCOLON':([3,29,35,36,37,39,40,41,43,44,66,69,70,71,72,73,74,84,88,],[4,-10,53,-8,-9,-31,54,-32,-40,-41,80,-27,-28,-29,-30,-33,83,89,91,]),'VAR':([4,6,10,12,53,68,],[6,-42,6,-5,-42,-4,]),'LBRACE':([4,5,6,7,10,12,24,26,53,60,68,82,],[-42,9,-42,-3,-42,-5,9,-2,-42,9,-4,9,]),'END':([8,29,],[14,-10,]),'RBRACE':([9,15,16,17,18,19,20,21,30,54,80,83,89,91,],[-42,29,-42,-12,-13,-14,-15,-16,-11,-25,-17,-39,-26,-38,]),'IF':([9,16,18,19,20,21,54,80,83,89,91,],[23,23,-13,-14,-15,-16,-25,-17,-39,-26,-38,]),'DO':([9,16,18,19,20,21,54,80,83,89,91,],[24,24,-13,-14,-15,-16,-25,-17,-39,-26,-38,]),'COUT':([9,16,18,19,20,21,54,80,83,89,91,],[25,25,-13,-14,-15,-16,-25,-17,-39,-26,-38,]),'COLON':([11,13,38,],[27,-6,-7,]),'COMMA':([13,39,41,43,44,49,50,51,52,69,70,71,72,73,75,76,77,78,81,90,],[28,-31,-32,-40,-41,67,-20,-21,-22,-27,-28,-29,-30,-33,-34,-35,-36,-37,85,85,]),'EQUALS':([22,39,41,43,44,46,50,69,70,71,72,73,],[31,-31,-32,-40,-41,63,63,-27,-28,-29,-30,-33,]),'LPAREN':([23,25,31,32,34,42,47,55,56,57,58,61,62,63,64,65,67,85,],[32,34,42,42,42,42,65,42,42,42,42,42,42,42,42,42,42,42,]),'INTEGER':([27,],[36,]),'FLOAT':([27,],[37,]),'WHILE':([29,33,],[-10,47,]),'ELSE':([29,74,],[-10,82,]),'CTEINT':([31,32,34,42,55,56,57,58,61,62,63,64,65,67,85,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'CTEFLOAT':([31,32,34,42,55,56,57,58,61,62,63,64,65,67,85,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CTESTRING':([34,67,85,],[52,52,52,]),'PLUS':([39,40,41,43,44,46,50,59,69,70,71,72,73,75,76,77,78,],[-31,55,-32,-40,-41,55,55,55,-27,-28,-29,-30,-33,55,55,55,55,]),'MINUS':([39,40,41,43,44,46,50,59,69,70,71,72,73,75,76,77,78,],[-31,56,-32,-40,-41,56,56,56,-27,-28,-29,-30,-33,56,56,56,56,]),'TIMES':([39,40,41,43,44,46,50,59,69,70,71,72,73,75,76,77,78,],[-31,57,-32,-40,-41,57,57,57,57,57,-29,-30,-33,57,57,57,57,]),'DIVIDE':([39,40,41,43,44,46,50,59,69,70,71,72,73,75,76,77,78,],[-31,58,-32,-40,-41,58,58,58,58,58,-29,-30,-33,58,58,58,58,]),'LT':([39,41,43,44,46,50,69,70,71,72,73,],[-31,-32,-40,-41,61,61,-27,-28,-29,-30,-33,]),'GT':([39,41,43,44,46,50,69,70,71,72,73,],[-31,-32,-40,-41,62,62,-27,-28,-29,-30,-33,]),'NE':([39,41,43,44,46,50,69,70,71,72,73,],[-31,-32,-40,-41,64,64,-27,-28,-29,-30,-33,]),'RPAREN':([39,41,43,44,45,48,49,50,51,52,59,69,70,71,72,73,75,76,77,78,79,81,86,87,90,92,],[-31,-32,-40,-41,60,66,-18,-20,-21,-22,73,-27,-28,-29,-30,-33,-34,-35,-36,-37,84,-42,-19,-24,-42,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,10,],[5,26,]),'empty':([4,6,9,10,16,53,81,90,],[7,12,17,7,17,12,87,87,]),'body':([5,24,60,82,],[8,33,74,88,]),'typed_vars':([6,53,],[10,68,]),'vars_list':([6,28,53,],[11,38,11,]),'listofstatements':([9,16,],[15,30,]),'statement':([9,16,],[16,16,]),'assign':([9,16,],[18,18,]),'condition':([9,16,],[19,19,]),'cycle':([9,16,],[20,20,]),'print':([9,16,],[21,21,]),'type':([27,],[35,]),'expr':([31,32,34,42,55,56,57,58,61,62,63,64,65,67,85,],[40,46,50,59,69,70,71,72,75,76,77,78,46,50,50,]),'cte':([31,32,34,42,55,56,57,58,61,62,63,64,65,67,85,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'relexpr':([32,34,65,67,85,],[45,51,79,51,51,]),'listedexpr':([34,],[48,]),'c':([34,67,85,],[49,81,90,]),'m':([81,90,],[86,92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SCOLON vars body END','programa',6,'p_programa','parser_patito.py',21),
  ('vars -> VAR typed_vars vars','vars',3,'p_vars','parser_patito.py',34),
  ('vars -> empty','vars',1,'p_vars','parser_patito.py',35),
  ('typed_vars -> vars_list COLON type SCOLON typed_vars','typed_vars',5,'p_typed_vars','parser_patito.py',71),
  ('typed_vars -> empty','typed_vars',1,'p_typed_vars','parser_patito.py',72),
  ('vars_list -> ID','vars_list',1,'p_vars_list','parser_patito.py',85),
  ('vars_list -> ID COMMA vars_list','vars_list',3,'p_vars_list','parser_patito.py',86),
  ('type -> INTEGER','type',1,'p_type','parser_patito.py',94),
  ('type -> FLOAT','type',1,'p_type','parser_patito.py',95),
  ('body -> LBRACE listofstatements RBRACE','body',3,'p_body','parser_patito.py',102),
  ('listofstatements -> statement listofstatements','listofstatements',2,'p_s','parser_patito.py',109),
  ('listofstatements -> empty','listofstatements',1,'p_s','parser_patito.py',110),
  ('statement -> assign','statement',1,'p_statement','parser_patito.py',117),
  ('statement -> condition','statement',1,'p_statement','parser_patito.py',118),
  ('statement -> cycle','statement',1,'p_statement','parser_patito.py',119),
  ('statement -> print','statement',1,'p_statement','parser_patito.py',120),
  ('print -> COUT LPAREN listedexpr RPAREN SCOLON','print',5,'p_print','parser_patito.py',127),
  ('listedexpr -> c','listedexpr',1,'p_listedexpr','parser_patito.py',134),
  ('listedexpr -> c COMMA c m','listedexpr',4,'p_listedexpr','parser_patito.py',135),
  ('c -> expr','c',1,'p_c','parser_patito.py',151),
  ('c -> relexpr','c',1,'p_c','parser_patito.py',152),
  ('c -> CTESTRING','c',1,'p_c','parser_patito.py',153),
  ('m -> COMMA c m','m',3,'p_m','parser_patito.py',161),
  ('m -> empty','m',1,'p_m','parser_patito.py',162),
  ('assign -> ID EQUALS expr SCOLON','assign',4,'p_assign','parser_patito.py',171),
  ('cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON','cycle',7,'p_cycle','parser_patito.py',184),
  ('expr -> expr PLUS expr','expr',3,'p_expr_operations','parser_patito.py',190),
  ('expr -> expr MINUS expr','expr',3,'p_expr_operations','parser_patito.py',191),
  ('expr -> expr TIMES expr','expr',3,'p_expr_operations','parser_patito.py',192),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_operations','parser_patito.py',193),
  ('expr -> ID','expr',1,'p_expr_variable','parser_patito.py',199),
  ('expr -> cte','expr',1,'p_expr_constant','parser_patito.py',208),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','parser_patito.py',212),
  ('relexpr -> expr LT expr','relexpr',3,'p_relexpr','parser_patito.py',220),
  ('relexpr -> expr GT expr','relexpr',3,'p_relexpr','parser_patito.py',221),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relexpr','parser_patito.py',222),
  ('relexpr -> expr NE expr','relexpr',3,'p_relexpr','parser_patito.py',223),
  ('condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON','condition',8,'p_condition','parser_patito.py',230),
  ('condition -> IF LPAREN relexpr RPAREN body SCOLON','condition',6,'p_condition','parser_patito.py',231),
  ('cte -> CTEINT','cte',1,'p_cte','parser_patito.py',248),
  ('cte -> CTEFLOAT','cte',1,'p_cte','parser_patito.py',249),
  ('empty -> <empty>','empty',0,'p_empty','parser_patito.py',255),
]
