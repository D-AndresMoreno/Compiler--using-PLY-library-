
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTGTleftPLUSMINUSleftTIMESDIVIDECOLON COMMA COUT CTEFLOAT CTEINT CTESTRING DIVIDE DO ELSE END EQUALS FLOAT GT ID IF INTEGER LBRACE LPAREN LT MINUS NE PLUS PROGRAM RBRACE RPAREN SCOLON TIMES VAR WHILE\n    programa : PROGRAM ID SCOLON vars body END\n    \n    vars : VAR typed_vars vars\n         | empty\n    \n    typed_vars : vars_list COLON type SCOLON typed_vars\n               | empty\n    \n    vars_list : ID \n              | ID COMMA vars_list\n    \n    type : INTEGER\n         | FLOAT\n    \n    body : LBRACE listofstatements RBRACE\n    \n    listofstatements : statement listofstatements\n                     | empty\n    \n    statement : assign\n              | condition\n              | cycle\n              | print\n    \n    print :  COUT LPAREN listedexpr RPAREN SCOLON\n    \n    listedexpr :  c\n               |  c COMMA c m\n        \n    \n    c :  ID\n      |  cte\n      |  CTESTRING\n\n    \n    m :  COMMA c m\n      |  empty\n    \n    assign :  ID EQUALS expr SCOLON\n    \n    cycle :  do body WHILE LPAREN relexprcycle RPAREN SCOLON\n    \n    do :  DO \n    expr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE exprexpr : ID\n            | LPAREN ID RPARENexpr : cte\n            | LPAREN cte RPARENexpr : LPAREN expr RPARENrelexprcond : expr LT expr\n               | expr GT expr\n               | expr EQUALS expr\n               | expr NE exprrelexprcycle : expr LT expr\n               | expr GT expr\n               | expr EQUALS expr\n               | expr NE expr\n    condition : IF LPAREN relexprcond RPAREN body else body SCOLON\n              | IF LPAREN relexprcond RPAREN body ifend\n    \n    else : ELSE\n    \n    ifend : SCOLON\n    \n    cte : CTEINT\n        | CTEFLOAT\n    empty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,14,],[0,-1,]),'ID':([2,6,9,16,18,19,20,21,29,32,33,35,42,54,55,56,57,58,59,64,65,66,67,68,70,86,89,90,93,94,95,96,97,101,107,],[3,13,22,22,-13,-14,-15,-16,13,40,40,51,60,13,-25,40,40,40,40,40,40,40,40,40,51,-17,-48,-46,40,40,40,40,51,-26,-45,]),'SCOLON':([3,30,36,37,38,40,41,43,44,45,69,72,73,74,75,76,77,78,79,92,100,],[4,-10,54,-8,-9,-32,55,-34,-49,-50,86,-28,-29,-30,-31,-33,-35,-36,89,101,107,]),'VAR':([4,6,10,12,54,71,],[6,-51,6,-5,-51,-4,]),'LBRACE':([4,5,6,7,10,12,24,26,27,54,63,71,88,91,],[-51,9,-51,-3,-51,-5,9,-27,-2,-51,9,-4,9,-47,]),'END':([8,30,],[14,-10,]),'RBRACE':([9,15,16,17,18,19,20,21,31,55,86,89,90,101,107,],[-51,30,-51,-12,-13,-14,-15,-16,-11,-25,-17,-48,-46,-26,-45,]),'IF':([9,16,18,19,20,21,55,86,89,90,101,107,],[23,23,-13,-14,-15,-16,-25,-17,-48,-46,-26,-45,]),'COUT':([9,16,18,19,20,21,55,86,89,90,101,107,],[25,25,-13,-14,-15,-16,-25,-17,-48,-46,-26,-45,]),'DO':([9,16,18,19,20,21,55,86,89,90,101,107,],[26,26,-13,-14,-15,-16,-25,-17,-48,-46,-26,-45,]),'COLON':([11,13,39,],[28,-6,-7,]),'COMMA':([13,44,45,50,51,52,53,87,106,],[29,-49,-50,70,-20,-21,-22,97,97,]),'EQUALS':([22,40,43,44,45,47,72,73,74,75,76,77,78,85,],[32,-32,-34,-49,-50,66,-28,-29,-30,-31,-33,-35,-36,95,]),'LPAREN':([23,25,32,33,42,48,56,57,58,59,64,65,66,67,68,93,94,95,96,],[33,35,42,42,42,68,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'INTEGER':([28,],[37,]),'FLOAT':([28,],[38,]),'WHILE':([30,34,],[-10,48,]),'ELSE':([30,79,],[-10,91,]),'CTEINT':([32,33,35,42,56,57,58,59,64,65,66,67,68,70,93,94,95,96,97,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CTEFLOAT':([32,33,35,42,56,57,58,59,64,65,66,67,68,70,93,94,95,96,97,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'CTESTRING':([35,70,97,],[53,53,53,]),'PLUS':([40,41,43,44,45,47,60,61,62,72,73,74,75,76,77,78,80,81,82,83,85,102,103,104,105,],[-32,56,-34,-49,-50,56,-32,-34,56,-28,-29,-30,-31,-33,-35,-36,56,56,56,56,56,56,56,56,56,]),'MINUS':([40,41,43,44,45,47,60,61,62,72,73,74,75,76,77,78,80,81,82,83,85,102,103,104,105,],[-32,57,-34,-49,-50,57,-32,-34,57,-28,-29,-30,-31,-33,-35,-36,57,57,57,57,57,57,57,57,57,]),'TIMES':([40,41,43,44,45,47,60,61,62,72,73,74,75,76,77,78,80,81,82,83,85,102,103,104,105,],[-32,58,-34,-49,-50,58,-32,-34,58,58,58,-30,-31,-33,-35,-36,58,58,58,58,58,58,58,58,58,]),'DIVIDE':([40,41,43,44,45,47,60,61,62,72,73,74,75,76,77,78,80,81,82,83,85,102,103,104,105,],[-32,59,-34,-49,-50,59,-32,-34,59,59,59,-30,-31,-33,-35,-36,59,59,59,59,59,59,59,59,59,]),'LT':([40,43,44,45,47,72,73,74,75,76,77,78,85,],[-32,-34,-49,-50,64,-28,-29,-30,-31,-33,-35,-36,93,]),'GT':([40,43,44,45,47,72,73,74,75,76,77,78,85,],[-32,-34,-49,-50,65,-28,-29,-30,-31,-33,-35,-36,94,]),'NE':([40,43,44,45,47,72,73,74,75,76,77,78,85,],[-32,-34,-49,-50,67,-28,-29,-30,-31,-33,-35,-36,96,]),'RPAREN':([40,43,44,45,46,49,50,51,52,53,60,61,62,72,73,74,75,76,77,78,80,81,82,83,84,87,98,99,102,103,104,105,106,108,],[-32,-34,-49,-50,63,69,-18,-20,-21,-22,76,77,78,-28,-29,-30,-31,-33,-35,-36,-37,-38,-39,-40,92,-51,-19,-24,-41,-42,-43,-44,-51,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,10,],[5,27,]),'empty':([4,6,9,10,16,54,87,106,],[7,12,17,7,17,12,99,99,]),'body':([5,24,63,88,],[8,34,79,100,]),'typed_vars':([6,54,],[10,71,]),'vars_list':([6,29,54,],[11,39,11,]),'listofstatements':([9,16,],[15,31,]),'statement':([9,16,],[16,16,]),'assign':([9,16,],[18,18,]),'condition':([9,16,],[19,19,]),'cycle':([9,16,],[20,20,]),'print':([9,16,],[21,21,]),'do':([9,16,],[24,24,]),'type':([28,],[36,]),'expr':([32,33,42,56,57,58,59,64,65,66,67,68,93,94,95,96,],[41,47,62,72,73,74,75,80,81,82,83,85,102,103,104,105,]),'cte':([32,33,35,42,56,57,58,59,64,65,66,67,68,70,93,94,95,96,97,],[43,43,52,61,43,43,43,43,43,43,43,43,43,52,43,43,43,43,52,]),'relexprcond':([33,],[46,]),'listedexpr':([35,],[49,]),'c':([35,70,97,],[50,87,106,]),'relexprcycle':([68,],[84,]),'else':([79,],[88,]),'ifend':([79,],[90,]),'m':([87,106,],[98,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SCOLON vars body END','programa',6,'p_programa','parser_patito.py',21),
  ('vars -> VAR typed_vars vars','vars',3,'p_vars','parser_patito.py',29),
  ('vars -> empty','vars',1,'p_vars','parser_patito.py',30),
  ('typed_vars -> vars_list COLON type SCOLON typed_vars','typed_vars',5,'p_typed_vars','parser_patito.py',66),
  ('typed_vars -> empty','typed_vars',1,'p_typed_vars','parser_patito.py',67),
  ('vars_list -> ID','vars_list',1,'p_vars_list','parser_patito.py',80),
  ('vars_list -> ID COMMA vars_list','vars_list',3,'p_vars_list','parser_patito.py',81),
  ('type -> INTEGER','type',1,'p_type','parser_patito.py',89),
  ('type -> FLOAT','type',1,'p_type','parser_patito.py',90),
  ('body -> LBRACE listofstatements RBRACE','body',3,'p_body','parser_patito.py',97),
  ('listofstatements -> statement listofstatements','listofstatements',2,'p_s','parser_patito.py',103),
  ('listofstatements -> empty','listofstatements',1,'p_s','parser_patito.py',104),
  ('statement -> assign','statement',1,'p_statement','parser_patito.py',109),
  ('statement -> condition','statement',1,'p_statement','parser_patito.py',110),
  ('statement -> cycle','statement',1,'p_statement','parser_patito.py',111),
  ('statement -> print','statement',1,'p_statement','parser_patito.py',112),
  ('print -> COUT LPAREN listedexpr RPAREN SCOLON','print',5,'p_print','parser_patito.py',120),
  ('listedexpr -> c','listedexpr',1,'p_listedexpr','parser_patito.py',130),
  ('listedexpr -> c COMMA c m','listedexpr',4,'p_listedexpr','parser_patito.py',131),
  ('c -> ID','c',1,'p_c','parser_patito.py',147),
  ('c -> cte','c',1,'p_c','parser_patito.py',148),
  ('c -> CTESTRING','c',1,'p_c','parser_patito.py',149),
  ('m -> COMMA c m','m',3,'p_m','parser_patito.py',157),
  ('m -> empty','m',1,'p_m','parser_patito.py',158),
  ('assign -> ID EQUALS expr SCOLON','assign',4,'p_assign','parser_patito.py',166),
  ('cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON','cycle',7,'p_cycle','parser_patito.py',186),
  ('do -> DO','do',1,'p_cycle_do_mark','parser_patito.py',193),
  ('expr -> expr PLUS expr','expr',3,'p_expr_operations','parser_patito.py',203),
  ('expr -> expr MINUS expr','expr',3,'p_expr_operations','parser_patito.py',204),
  ('expr -> expr TIMES expr','expr',3,'p_expr_operations','parser_patito.py',205),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_operations','parser_patito.py',206),
  ('expr -> ID','expr',1,'p_expr_variable','parser_patito.py',235),
  ('expr -> LPAREN ID RPAREN','expr',3,'p_expr_variable','parser_patito.py',236),
  ('expr -> cte','expr',1,'p_expr_constant','parser_patito.py',255),
  ('expr -> LPAREN cte RPAREN','expr',3,'p_expr_constant','parser_patito.py',256),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','parser_patito.py',263),
  ('relexprcond -> expr LT expr','relexprcond',3,'p_relexprcond','parser_patito.py',273),
  ('relexprcond -> expr GT expr','relexprcond',3,'p_relexprcond','parser_patito.py',274),
  ('relexprcond -> expr EQUALS expr','relexprcond',3,'p_relexprcond','parser_patito.py',275),
  ('relexprcond -> expr NE expr','relexprcond',3,'p_relexprcond','parser_patito.py',276),
  ('relexprcycle -> expr LT expr','relexprcycle',3,'p_relexprcycle','parser_patito.py',308),
  ('relexprcycle -> expr GT expr','relexprcycle',3,'p_relexprcycle','parser_patito.py',309),
  ('relexprcycle -> expr EQUALS expr','relexprcycle',3,'p_relexprcycle','parser_patito.py',310),
  ('relexprcycle -> expr NE expr','relexprcycle',3,'p_relexprcycle','parser_patito.py',311),
  ('condition -> IF LPAREN relexprcond RPAREN body else body SCOLON','condition',8,'p_condition','parser_patito.py',331),
  ('condition -> IF LPAREN relexprcond RPAREN body ifend','condition',6,'p_condition','parser_patito.py',332),
  ('else -> ELSE','else',1,'p_else_mark','parser_patito.py',344),
  ('ifend -> SCOLON','ifend',1,'p_ifend','parser_patito.py',353),
  ('cte -> CTEINT','cte',1,'p_cte','parser_patito.py',363),
  ('cte -> CTEFLOAT','cte',1,'p_cte','parser_patito.py',364),
  ('empty -> <empty>','empty',0,'p_empty','parser_patito.py',370),
]
