
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTGTleftPLUSMINUSleftTIMESDIVIDECOLON COMMA COUT CTEFLOAT CTEINT CTESTRING DIVIDE DO ELSE END EQUALS FLOAT GT ID IF INTEGER LBRACE LPAREN LT MINUS NE PLUS PROGRAM RBRACE RPAREN SCOLON TIMES VAR WHILE\n    programa : PROGRAM ID SCOLON vars body END\n    \n    vars : VAR typed_vars vars\n         | empty\n    \n    typed_vars : vars_list COLON type SCOLON typed_vars\n               | empty\n    \n    vars_list : ID \n              | ID COMMA vars_list\n    \n    type : INTEGER\n         | FLOAT\n    \n    body : LBRACE s RBRACE\n    \n    s : statement s\n      | empty\n    \n    statement : assign\n         | condition\n         | cycle\n         | print\n    \n    print :  COUT LPAREN c m RPAREN SCOLON\n    \n    c :  expresion\n      |  CTESTRING\n    \n    m :  COMMA c m\n      |  empty\n    \n    assign :  ID EQUALS expresion SCOLON\n    \n    cycle :  DO body WHILE LPAREN expresion RPAREN SCOLON\n    \n    expresion :  exp x\n              |  exp\n    \n    x : GT exp\n      | LT exp\n      | NE exp\n    \n    condition : IF LPAREN expresion RPAREN body ELSE body SCOLON\n              | IF LPAREN expresion RPAREN body SCOLON\n    \n    cte : CTEINT\n        | CTEFLOAT\n    \n    factor : LPAREN expresion RPAREN\n           | factor_op ID\n           | cte\n    \n    factor_op : PLUS\n              | MINUS\n    \n    exp : termino z\n    \n    z : PLUS exp\n      | MINUS exp\n      | empty\n    \n    termino : factor y\n    \n    y : TIMES termino\n      | DIVIDE termino\n      | empty\n    empty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,14,],[0,-1,]),'ID':([2,6,9,16,18,19,20,21,28,44,46,47,55,56,90,92,95,96,],[3,13,22,22,-13,-14,-15,-16,13,70,-36,-37,13,-22,-30,-17,-23,-29,]),'SCOLON':([3,29,35,36,37,39,40,41,42,45,48,49,57,61,64,65,68,70,77,78,79,80,81,82,83,84,85,87,91,94,],[4,-10,55,-8,-9,56,-25,-46,-46,-35,-31,-32,-24,-38,-41,-42,-45,-34,-26,-27,-28,-39,-40,-43,-44,-33,90,92,95,96,]),'VAR':([4,6,10,12,55,76,],[6,-46,6,-5,-46,-4,]),'LBRACE':([4,5,6,7,10,12,24,26,55,71,76,89,],[-46,9,-46,-3,-46,-5,9,-2,-46,9,-4,9,]),'END':([8,29,],[14,-10,]),'RBRACE':([9,15,16,17,18,19,20,21,30,56,90,92,95,96,],[-46,29,-46,-12,-13,-14,-15,-16,-11,-22,-30,-17,-23,-29,]),'IF':([9,16,18,19,20,21,56,90,92,95,96,],[23,23,-13,-14,-15,-16,-22,-30,-17,-23,-29,]),'DO':([9,16,18,19,20,21,56,90,92,95,96,],[24,24,-13,-14,-15,-16,-22,-30,-17,-23,-29,]),'COUT':([9,16,18,19,20,21,56,90,92,95,96,],[25,25,-13,-14,-15,-16,-22,-30,-17,-23,-29,]),'COLON':([11,13,38,],[27,-6,-7,]),'COMMA':([13,40,41,42,45,48,49,52,53,54,57,61,64,65,68,70,77,78,79,80,81,82,83,84,88,],[28,-25,-46,-46,-35,-31,-32,74,-18,-19,-24,-38,-41,-42,-45,-34,-26,-27,-28,-39,-40,-43,-44,-33,74,]),'EQUALS':([22,],[31,]),'LPAREN':([23,25,31,32,34,43,51,58,59,60,62,63,66,67,72,74,],[32,34,43,43,43,43,72,43,43,43,43,43,43,43,43,43,]),'INTEGER':([27,],[36,]),'FLOAT':([27,],[37,]),'WHILE':([29,33,],[-10,51,]),'ELSE':([29,85,],[-10,89,]),'PLUS':([31,32,34,41,42,43,45,48,49,58,59,60,62,63,65,66,67,68,70,72,74,82,83,84,],[46,46,46,62,-46,46,-35,-31,-32,46,46,46,46,46,-42,46,46,-45,-34,46,46,-43,-44,-33,]),'MINUS':([31,32,34,41,42,43,45,48,49,58,59,60,62,63,65,66,67,68,70,72,74,82,83,84,],[47,47,47,63,-46,47,-35,-31,-32,47,47,47,47,47,-42,47,47,-45,-34,47,47,-43,-44,-33,]),'CTEINT':([31,32,34,43,58,59,60,62,63,66,67,72,74,],[48,48,48,48,48,48,48,48,48,48,48,48,48,]),'CTEFLOAT':([31,32,34,43,58,59,60,62,63,66,67,72,74,],[49,49,49,49,49,49,49,49,49,49,49,49,49,]),'CTESTRING':([34,74,],[54,54,]),'RPAREN':([40,41,42,45,48,49,50,52,53,54,57,61,64,65,68,69,70,73,75,77,78,79,80,81,82,83,84,86,88,93,],[-25,-46,-46,-35,-31,-32,71,-46,-18,-19,-24,-38,-41,-42,-45,84,-34,87,-21,-26,-27,-28,-39,-40,-43,-44,-33,91,-46,-20,]),'GT':([40,41,42,45,48,49,61,64,65,68,70,80,81,82,83,84,],[58,-46,-46,-35,-31,-32,-38,-41,-42,-45,-34,-39,-40,-43,-44,-33,]),'LT':([40,41,42,45,48,49,61,64,65,68,70,80,81,82,83,84,],[59,-46,-46,-35,-31,-32,-38,-41,-42,-45,-34,-39,-40,-43,-44,-33,]),'NE':([40,41,42,45,48,49,61,64,65,68,70,80,81,82,83,84,],[60,-46,-46,-35,-31,-32,-38,-41,-42,-45,-34,-39,-40,-43,-44,-33,]),'TIMES':([42,45,48,49,70,84,],[66,-35,-31,-32,-34,-33,]),'DIVIDE':([42,45,48,49,70,84,],[67,-35,-31,-32,-34,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,10,],[5,26,]),'empty':([4,6,9,10,16,41,42,52,55,88,],[7,12,17,7,17,64,68,75,12,75,]),'body':([5,24,71,89,],[8,33,85,94,]),'typed_vars':([6,55,],[10,76,]),'vars_list':([6,28,55,],[11,38,11,]),'s':([9,16,],[15,30,]),'statement':([9,16,],[16,16,]),'assign':([9,16,],[18,18,]),'condition':([9,16,],[19,19,]),'cycle':([9,16,],[20,20,]),'print':([9,16,],[21,21,]),'type':([27,],[35,]),'expresion':([31,32,34,43,72,74,],[39,50,53,69,86,53,]),'exp':([31,32,34,43,58,59,60,62,63,72,74,],[40,40,40,40,77,78,79,80,81,40,40,]),'termino':([31,32,34,43,58,59,60,62,63,66,67,72,74,],[41,41,41,41,41,41,41,41,41,82,83,41,41,]),'factor':([31,32,34,43,58,59,60,62,63,66,67,72,74,],[42,42,42,42,42,42,42,42,42,42,42,42,42,]),'factor_op':([31,32,34,43,58,59,60,62,63,66,67,72,74,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'cte':([31,32,34,43,58,59,60,62,63,66,67,72,74,],[45,45,45,45,45,45,45,45,45,45,45,45,45,]),'c':([34,74,],[52,88,]),'x':([40,],[57,]),'z':([41,],[61,]),'y':([42,],[65,]),'m':([52,88,],[73,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SCOLON vars body END','programa',6,'p_programa','parser_patito.py',17),
  ('vars -> VAR typed_vars vars','vars',3,'p_vars','parser_patito.py',28),
  ('vars -> empty','vars',1,'p_vars','parser_patito.py',29),
  ('typed_vars -> vars_list COLON type SCOLON typed_vars','typed_vars',5,'p_typed_vars','parser_patito.py',35),
  ('typed_vars -> empty','typed_vars',1,'p_typed_vars','parser_patito.py',36),
  ('vars_list -> ID','vars_list',1,'p_vars_list','parser_patito.py',42),
  ('vars_list -> ID COMMA vars_list','vars_list',3,'p_vars_list','parser_patito.py',43),
  ('type -> INTEGER','type',1,'p_type','parser_patito.py',49),
  ('type -> FLOAT','type',1,'p_type','parser_patito.py',50),
  ('body -> LBRACE s RBRACE','body',3,'p_body','parser_patito.py',56),
  ('s -> statement s','s',2,'p_s','parser_patito.py',62),
  ('s -> empty','s',1,'p_s','parser_patito.py',63),
  ('statement -> assign','statement',1,'p_statement','parser_patito.py',69),
  ('statement -> condition','statement',1,'p_statement','parser_patito.py',70),
  ('statement -> cycle','statement',1,'p_statement','parser_patito.py',71),
  ('statement -> print','statement',1,'p_statement','parser_patito.py',72),
  ('print -> COUT LPAREN c m RPAREN SCOLON','print',6,'p_print','parser_patito.py',78),
  ('c -> expresion','c',1,'p_c','parser_patito.py',84),
  ('c -> CTESTRING','c',1,'p_c','parser_patito.py',85),
  ('m -> COMMA c m','m',3,'p_m','parser_patito.py',91),
  ('m -> empty','m',1,'p_m','parser_patito.py',92),
  ('assign -> ID EQUALS expresion SCOLON','assign',4,'p_assign','parser_patito.py',98),
  ('cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON','cycle',7,'p_cycle','parser_patito.py',104),
  ('expresion -> exp x','expresion',2,'p_expresion','parser_patito.py',110),
  ('expresion -> exp','expresion',1,'p_expresion','parser_patito.py',111),
  ('x -> GT exp','x',2,'p_x','parser_patito.py',117),
  ('x -> LT exp','x',2,'p_x','parser_patito.py',118),
  ('x -> NE exp','x',2,'p_x','parser_patito.py',119),
  ('condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON','condition',8,'p_condition','parser_patito.py',125),
  ('condition -> IF LPAREN expresion RPAREN body SCOLON','condition',6,'p_condition','parser_patito.py',126),
  ('cte -> CTEINT','cte',1,'p_cte','parser_patito.py',133),
  ('cte -> CTEFLOAT','cte',1,'p_cte','parser_patito.py',134),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser_patito.py',140),
  ('factor -> factor_op ID','factor',2,'p_factor','parser_patito.py',141),
  ('factor -> cte','factor',1,'p_factor','parser_patito.py',142),
  ('factor_op -> PLUS','factor_op',1,'p_factor_op','parser_patito.py',148),
  ('factor_op -> MINUS','factor_op',1,'p_factor_op','parser_patito.py',149),
  ('exp -> termino z','exp',2,'p_exp','parser_patito.py',155),
  ('z -> PLUS exp','z',2,'p_z','parser_patito.py',161),
  ('z -> MINUS exp','z',2,'p_z','parser_patito.py',162),
  ('z -> empty','z',1,'p_z','parser_patito.py',163),
  ('termino -> factor y','termino',2,'p_termino','parser_patito.py',169),
  ('y -> TIMES termino','y',2,'p_y','parser_patito.py',175),
  ('y -> DIVIDE termino','y',2,'p_y','parser_patito.py',176),
  ('y -> empty','y',1,'p_y','parser_patito.py',177),
  ('empty -> <empty>','empty',0,'p_empty','parser_patito.py',183),
]
