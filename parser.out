Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SCOLON vars body END
Rule 2     vars -> VAR typed_vars vars
Rule 3     vars -> empty
Rule 4     typed_vars -> vars_list COLON type SCOLON typed_vars
Rule 5     typed_vars -> empty
Rule 6     vars_list -> ID
Rule 7     vars_list -> ID COMMA vars_list
Rule 8     type -> INTEGER
Rule 9     type -> FLOAT
Rule 10    body -> LBRACE listofstatements RBRACE
Rule 11    listofstatements -> statement listofstatements
Rule 12    listofstatements -> empty
Rule 13    statement -> assign
Rule 14    statement -> condition
Rule 15    statement -> cycle
Rule 16    statement -> print
Rule 17    print -> COUT LPAREN listedexpr RPAREN SCOLON
Rule 18    listedexpr -> c
Rule 19    listedexpr -> c COMMA c m
Rule 20    c -> ID
Rule 21    c -> cte
Rule 22    c -> CTESTRING
Rule 23    m -> COMMA c m
Rule 24    m -> empty
Rule 25    assign -> ID EQUALS expr SCOLON
Rule 26    cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON
Rule 27    do -> DO
Rule 28    expr -> expr PLUS expr
Rule 29    expr -> expr MINUS expr
Rule 30    expr -> expr TIMES expr
Rule 31    expr -> expr DIVIDE expr
Rule 32    expr -> ID
Rule 33    expr -> LPAREN ID RPAREN
Rule 34    expr -> cte
Rule 35    expr -> LPAREN cte RPAREN
Rule 36    expr -> LPAREN expr RPAREN
Rule 37    relexprcond -> expr LT expr
Rule 38    relexprcond -> expr GT expr
Rule 39    relexprcond -> expr EQUALS expr
Rule 40    relexprcond -> expr NE expr
Rule 41    relexprcycle -> expr LT expr
Rule 42    relexprcycle -> expr GT expr
Rule 43    relexprcycle -> expr EQUALS expr
Rule 44    relexprcycle -> expr NE expr
Rule 45    condition -> IF LPAREN relexprcond RPAREN body else body SCOLON
Rule 46    condition -> IF LPAREN relexprcond RPAREN body ifend
Rule 47    else -> ELSE
Rule 48    ifend -> SCOLON
Rule 49    cte -> CTEINT
Rule 50    cte -> CTEFLOAT
Rule 51    empty -> <empty>

Terminals, with rules where they appear

COLON                : 4
COMMA                : 7 19 23
COUT                 : 17
CTEFLOAT             : 50
CTEINT               : 49
CTESTRING            : 22
DIVIDE               : 31
DO                   : 27
ELSE                 : 47
END                  : 1
EQUALS               : 25 39 43
FLOAT                : 9
GT                   : 38 42
ID                   : 1 6 7 20 25 32 33
IF                   : 45 46
INTEGER              : 8
LBRACE               : 10
LPAREN               : 17 26 33 35 36 45 46
LT                   : 37 41
MINUS                : 29
NE                   : 40 44
PLUS                 : 28
PROGRAM              : 1
RBRACE               : 10
RPAREN               : 17 26 33 35 36 45 46
SCOLON               : 1 4 17 25 26 45 48
TIMES                : 30
VAR                  : 2
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

assign               : 13
body                 : 1 26 45 45 46
c                    : 18 19 19 23
condition            : 14
cte                  : 21 34 35
cycle                : 15
do                   : 26
else                 : 45
empty                : 3 5 12 24
expr                 : 25 28 28 29 29 30 30 31 31 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44
ifend                : 46
listedexpr           : 17
listofstatements     : 10 11
m                    : 19 23
print                : 16
programa             : 0
relexprcond          : 45 46
relexprcycle         : 26
statement            : 11
type                 : 4
typed_vars           : 2 4
vars                 : 1 2
vars_list            : 4 7

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SCOLON vars body END

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SCOLON vars body END

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SCOLON vars body END

    SCOLON          shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SCOLON . vars body END
    (2) vars -> . VAR typed_vars vars
    (3) vars -> . empty
    (51) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 51 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SCOLON vars . body END
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 8

state 6

    (2) vars -> VAR . typed_vars vars
    (4) typed_vars -> . vars_list COLON type SCOLON typed_vars
    (5) typed_vars -> . empty
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list
    (51) empty -> .

    ID              shift and go to state 13
    VAR             reduce using rule 51 (empty -> .)
    LBRACE          reduce using rule 51 (empty -> .)

    typed_vars                     shift and go to state 10
    vars_list                      shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) vars -> empty .

    LBRACE          reduce using rule 3 (vars -> empty .)


state 8

    (1) programa -> PROGRAM ID SCOLON vars body . END

    END             shift and go to state 14


state 9

    (10) body -> LBRACE . listofstatements RBRACE
    (11) listofstatements -> . statement listofstatements
    (12) listofstatements -> . empty
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (51) empty -> .
    (25) assign -> . ID EQUALS expr SCOLON
    (45) condition -> . IF LPAREN relexprcond RPAREN body else body SCOLON
    (46) condition -> . IF LPAREN relexprcond RPAREN body ifend
    (26) cycle -> . do body WHILE LPAREN relexprcycle RPAREN SCOLON
    (17) print -> . COUT LPAREN listedexpr RPAREN SCOLON
    (27) do -> . DO

    RBRACE          reduce using rule 51 (empty -> .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    COUT            shift and go to state 25
    DO              shift and go to state 26

    listofstatements               shift and go to state 15
    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 19
    cycle                          shift and go to state 20
    print                          shift and go to state 21
    do                             shift and go to state 24

state 10

    (2) vars -> VAR typed_vars . vars
    (2) vars -> . VAR typed_vars vars
    (3) vars -> . empty
    (51) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 51 (empty -> .)

    vars                           shift and go to state 27
    empty                          shift and go to state 7

state 11

    (4) typed_vars -> vars_list . COLON type SCOLON typed_vars

    COLON           shift and go to state 28


state 12

    (5) typed_vars -> empty .

    VAR             reduce using rule 5 (typed_vars -> empty .)
    LBRACE          reduce using rule 5 (typed_vars -> empty .)


state 13

    (6) vars_list -> ID .
    (7) vars_list -> ID . COMMA vars_list

    COLON           reduce using rule 6 (vars_list -> ID .)
    COMMA           shift and go to state 29


state 14

    (1) programa -> PROGRAM ID SCOLON vars body END .

    $end            reduce using rule 1 (programa -> PROGRAM ID SCOLON vars body END .)


state 15

    (10) body -> LBRACE listofstatements . RBRACE

    RBRACE          shift and go to state 30


state 16

    (11) listofstatements -> statement . listofstatements
    (11) listofstatements -> . statement listofstatements
    (12) listofstatements -> . empty
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (51) empty -> .
    (25) assign -> . ID EQUALS expr SCOLON
    (45) condition -> . IF LPAREN relexprcond RPAREN body else body SCOLON
    (46) condition -> . IF LPAREN relexprcond RPAREN body ifend
    (26) cycle -> . do body WHILE LPAREN relexprcycle RPAREN SCOLON
    (17) print -> . COUT LPAREN listedexpr RPAREN SCOLON
    (27) do -> . DO

    RBRACE          reduce using rule 51 (empty -> .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    COUT            shift and go to state 25
    DO              shift and go to state 26

    statement                      shift and go to state 16
    listofstatements               shift and go to state 31
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 19
    cycle                          shift and go to state 20
    print                          shift and go to state 21
    do                             shift and go to state 24

state 17

    (12) listofstatements -> empty .

    RBRACE          reduce using rule 12 (listofstatements -> empty .)


state 18

    (13) statement -> assign .

    ID              reduce using rule 13 (statement -> assign .)
    IF              reduce using rule 13 (statement -> assign .)
    COUT            reduce using rule 13 (statement -> assign .)
    DO              reduce using rule 13 (statement -> assign .)
    RBRACE          reduce using rule 13 (statement -> assign .)


state 19

    (14) statement -> condition .

    ID              reduce using rule 14 (statement -> condition .)
    IF              reduce using rule 14 (statement -> condition .)
    COUT            reduce using rule 14 (statement -> condition .)
    DO              reduce using rule 14 (statement -> condition .)
    RBRACE          reduce using rule 14 (statement -> condition .)


state 20

    (15) statement -> cycle .

    ID              reduce using rule 15 (statement -> cycle .)
    IF              reduce using rule 15 (statement -> cycle .)
    COUT            reduce using rule 15 (statement -> cycle .)
    DO              reduce using rule 15 (statement -> cycle .)
    RBRACE          reduce using rule 15 (statement -> cycle .)


state 21

    (16) statement -> print .

    ID              reduce using rule 16 (statement -> print .)
    IF              reduce using rule 16 (statement -> print .)
    COUT            reduce using rule 16 (statement -> print .)
    DO              reduce using rule 16 (statement -> print .)
    RBRACE          reduce using rule 16 (statement -> print .)


state 22

    (25) assign -> ID . EQUALS expr SCOLON

    EQUALS          shift and go to state 32


state 23

    (45) condition -> IF . LPAREN relexprcond RPAREN body else body SCOLON
    (46) condition -> IF . LPAREN relexprcond RPAREN body ifend

    LPAREN          shift and go to state 33


state 24

    (26) cycle -> do . body WHILE LPAREN relexprcycle RPAREN SCOLON
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 34

state 25

    (17) print -> COUT . LPAREN listedexpr RPAREN SCOLON

    LPAREN          shift and go to state 35


state 26

    (27) do -> DO .

    LBRACE          reduce using rule 27 (do -> DO .)


state 27

    (2) vars -> VAR typed_vars vars .

    LBRACE          reduce using rule 2 (vars -> VAR typed_vars vars .)


state 28

    (4) typed_vars -> vars_list COLON . type SCOLON typed_vars
    (8) type -> . INTEGER
    (9) type -> . FLOAT

    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38

    type                           shift and go to state 36

state 29

    (7) vars_list -> ID COMMA . vars_list
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list

    ID              shift and go to state 13

    vars_list                      shift and go to state 39

state 30

    (10) body -> LBRACE listofstatements RBRACE .

    END             reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)
    WHILE           reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)
    ELSE            reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)
    SCOLON          reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)


state 31

    (11) listofstatements -> statement listofstatements .

    RBRACE          reduce using rule 11 (listofstatements -> statement listofstatements .)


state 32

    (25) assign -> ID EQUALS . expr SCOLON
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 41
    cte                            shift and go to state 43

state 33

    (45) condition -> IF LPAREN . relexprcond RPAREN body else body SCOLON
    (46) condition -> IF LPAREN . relexprcond RPAREN body ifend
    (37) relexprcond -> . expr LT expr
    (38) relexprcond -> . expr GT expr
    (39) relexprcond -> . expr EQUALS expr
    (40) relexprcond -> . expr NE expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    relexprcond                    shift and go to state 46
    expr                           shift and go to state 47
    cte                            shift and go to state 43

state 34

    (26) cycle -> do body . WHILE LPAREN relexprcycle RPAREN SCOLON

    WHILE           shift and go to state 48


state 35

    (17) print -> COUT LPAREN . listedexpr RPAREN SCOLON
    (18) listedexpr -> . c
    (19) listedexpr -> . c COMMA c m
    (20) c -> . ID
    (21) c -> . cte
    (22) c -> . CTESTRING
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 51
    CTESTRING       shift and go to state 53
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    listedexpr                     shift and go to state 49
    c                              shift and go to state 50
    cte                            shift and go to state 52

state 36

    (4) typed_vars -> vars_list COLON type . SCOLON typed_vars

    SCOLON          shift and go to state 54


state 37

    (8) type -> INTEGER .

    SCOLON          reduce using rule 8 (type -> INTEGER .)


state 38

    (9) type -> FLOAT .

    SCOLON          reduce using rule 9 (type -> FLOAT .)


state 39

    (7) vars_list -> ID COMMA vars_list .

    COLON           reduce using rule 7 (vars_list -> ID COMMA vars_list .)


state 40

    (32) expr -> ID .

    SCOLON          reduce using rule 32 (expr -> ID .)
    PLUS            reduce using rule 32 (expr -> ID .)
    MINUS           reduce using rule 32 (expr -> ID .)
    TIMES           reduce using rule 32 (expr -> ID .)
    DIVIDE          reduce using rule 32 (expr -> ID .)
    LT              reduce using rule 32 (expr -> ID .)
    GT              reduce using rule 32 (expr -> ID .)
    EQUALS          reduce using rule 32 (expr -> ID .)
    NE              reduce using rule 32 (expr -> ID .)
    RPAREN          reduce using rule 32 (expr -> ID .)


state 41

    (25) assign -> ID EQUALS expr . SCOLON
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    SCOLON          shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 42

    (33) expr -> LPAREN . ID RPAREN
    (35) expr -> LPAREN . cte RPAREN
    (36) expr -> LPAREN . expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 60
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45
    LPAREN          shift and go to state 42

    cte                            shift and go to state 61
    expr                           shift and go to state 62

state 43

    (34) expr -> cte .

    SCOLON          reduce using rule 34 (expr -> cte .)
    PLUS            reduce using rule 34 (expr -> cte .)
    MINUS           reduce using rule 34 (expr -> cte .)
    TIMES           reduce using rule 34 (expr -> cte .)
    DIVIDE          reduce using rule 34 (expr -> cte .)
    LT              reduce using rule 34 (expr -> cte .)
    GT              reduce using rule 34 (expr -> cte .)
    EQUALS          reduce using rule 34 (expr -> cte .)
    NE              reduce using rule 34 (expr -> cte .)
    RPAREN          reduce using rule 34 (expr -> cte .)


state 44

    (49) cte -> CTEINT .

    SCOLON          reduce using rule 49 (cte -> CTEINT .)
    PLUS            reduce using rule 49 (cte -> CTEINT .)
    MINUS           reduce using rule 49 (cte -> CTEINT .)
    TIMES           reduce using rule 49 (cte -> CTEINT .)
    DIVIDE          reduce using rule 49 (cte -> CTEINT .)
    LT              reduce using rule 49 (cte -> CTEINT .)
    GT              reduce using rule 49 (cte -> CTEINT .)
    EQUALS          reduce using rule 49 (cte -> CTEINT .)
    NE              reduce using rule 49 (cte -> CTEINT .)
    COMMA           reduce using rule 49 (cte -> CTEINT .)
    RPAREN          reduce using rule 49 (cte -> CTEINT .)


state 45

    (50) cte -> CTEFLOAT .

    SCOLON          reduce using rule 50 (cte -> CTEFLOAT .)
    PLUS            reduce using rule 50 (cte -> CTEFLOAT .)
    MINUS           reduce using rule 50 (cte -> CTEFLOAT .)
    TIMES           reduce using rule 50 (cte -> CTEFLOAT .)
    DIVIDE          reduce using rule 50 (cte -> CTEFLOAT .)
    LT              reduce using rule 50 (cte -> CTEFLOAT .)
    GT              reduce using rule 50 (cte -> CTEFLOAT .)
    EQUALS          reduce using rule 50 (cte -> CTEFLOAT .)
    NE              reduce using rule 50 (cte -> CTEFLOAT .)
    COMMA           reduce using rule 50 (cte -> CTEFLOAT .)
    RPAREN          reduce using rule 50 (cte -> CTEFLOAT .)


state 46

    (45) condition -> IF LPAREN relexprcond . RPAREN body else body SCOLON
    (46) condition -> IF LPAREN relexprcond . RPAREN body ifend

    RPAREN          shift and go to state 63


state 47

    (37) relexprcond -> expr . LT expr
    (38) relexprcond -> expr . GT expr
    (39) relexprcond -> expr . EQUALS expr
    (40) relexprcond -> expr . NE expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    LT              shift and go to state 64
    GT              shift and go to state 65
    EQUALS          shift and go to state 66
    NE              shift and go to state 67
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 48

    (26) cycle -> do body WHILE . LPAREN relexprcycle RPAREN SCOLON

    LPAREN          shift and go to state 68


state 49

    (17) print -> COUT LPAREN listedexpr . RPAREN SCOLON

    RPAREN          shift and go to state 69


state 50

    (18) listedexpr -> c .
    (19) listedexpr -> c . COMMA c m

    RPAREN          reduce using rule 18 (listedexpr -> c .)
    COMMA           shift and go to state 70


state 51

    (20) c -> ID .

    COMMA           reduce using rule 20 (c -> ID .)
    RPAREN          reduce using rule 20 (c -> ID .)


state 52

    (21) c -> cte .

    COMMA           reduce using rule 21 (c -> cte .)
    RPAREN          reduce using rule 21 (c -> cte .)


state 53

    (22) c -> CTESTRING .

    COMMA           reduce using rule 22 (c -> CTESTRING .)
    RPAREN          reduce using rule 22 (c -> CTESTRING .)


state 54

    (4) typed_vars -> vars_list COLON type SCOLON . typed_vars
    (4) typed_vars -> . vars_list COLON type SCOLON typed_vars
    (5) typed_vars -> . empty
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list
    (51) empty -> .

    ID              shift and go to state 13
    VAR             reduce using rule 51 (empty -> .)
    LBRACE          reduce using rule 51 (empty -> .)

    vars_list                      shift and go to state 11
    typed_vars                     shift and go to state 71
    empty                          shift and go to state 12

state 55

    (25) assign -> ID EQUALS expr SCOLON .

    ID              reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    IF              reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    COUT            reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    DO              reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    RBRACE          reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)


state 56

    (28) expr -> expr PLUS . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 72
    cte                            shift and go to state 43

state 57

    (29) expr -> expr MINUS . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 73
    cte                            shift and go to state 43

state 58

    (30) expr -> expr TIMES . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 74
    cte                            shift and go to state 43

state 59

    (31) expr -> expr DIVIDE . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 75
    cte                            shift and go to state 43

state 60

    (33) expr -> LPAREN ID . RPAREN
    (32) expr -> ID .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 76
    PLUS            reduce using rule 32 (expr -> ID .)
    MINUS           reduce using rule 32 (expr -> ID .)
    TIMES           reduce using rule 32 (expr -> ID .)
    DIVIDE          reduce using rule 32 (expr -> ID .)

  ! RPAREN          [ reduce using rule 32 (expr -> ID .) ]


state 61

    (35) expr -> LPAREN cte . RPAREN
    (34) expr -> cte .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 77
    PLUS            reduce using rule 34 (expr -> cte .)
    MINUS           reduce using rule 34 (expr -> cte .)
    TIMES           reduce using rule 34 (expr -> cte .)
    DIVIDE          reduce using rule 34 (expr -> cte .)

  ! RPAREN          [ reduce using rule 34 (expr -> cte .) ]


state 62

    (36) expr -> LPAREN expr . RPAREN
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 63

    (45) condition -> IF LPAREN relexprcond RPAREN . body else body SCOLON
    (46) condition -> IF LPAREN relexprcond RPAREN . body ifend
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 79

state 64

    (37) relexprcond -> expr LT . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 80
    cte                            shift and go to state 43

state 65

    (38) relexprcond -> expr GT . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 81
    cte                            shift and go to state 43

state 66

    (39) relexprcond -> expr EQUALS . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 82
    cte                            shift and go to state 43

state 67

    (40) relexprcond -> expr NE . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 83
    cte                            shift and go to state 43

state 68

    (26) cycle -> do body WHILE LPAREN . relexprcycle RPAREN SCOLON
    (41) relexprcycle -> . expr LT expr
    (42) relexprcycle -> . expr GT expr
    (43) relexprcycle -> . expr EQUALS expr
    (44) relexprcycle -> . expr NE expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    relexprcycle                   shift and go to state 84
    expr                           shift and go to state 85
    cte                            shift and go to state 43

state 69

    (17) print -> COUT LPAREN listedexpr RPAREN . SCOLON

    SCOLON          shift and go to state 86


state 70

    (19) listedexpr -> c COMMA . c m
    (20) c -> . ID
    (21) c -> . cte
    (22) c -> . CTESTRING
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 51
    CTESTRING       shift and go to state 53
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    c                              shift and go to state 87
    cte                            shift and go to state 52

state 71

    (4) typed_vars -> vars_list COLON type SCOLON typed_vars .

    VAR             reduce using rule 4 (typed_vars -> vars_list COLON type SCOLON typed_vars .)
    LBRACE          reduce using rule 4 (typed_vars -> vars_list COLON type SCOLON typed_vars .)


state 72

    (28) expr -> expr PLUS expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 28 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 28 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 28 (expr -> expr PLUS expr .)
    LT              reduce using rule 28 (expr -> expr PLUS expr .)
    GT              reduce using rule 28 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 28 (expr -> expr PLUS expr .)
    NE              reduce using rule 28 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 28 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59

  ! TIMES           [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]


state 73

    (29) expr -> expr MINUS expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 29 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 29 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 29 (expr -> expr MINUS expr .)
    LT              reduce using rule 29 (expr -> expr MINUS expr .)
    GT              reduce using rule 29 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 29 (expr -> expr MINUS expr .)
    NE              reduce using rule 29 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 29 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59

  ! TIMES           [ reduce using rule 29 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]


state 74

    (30) expr -> expr TIMES expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 30 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 30 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 30 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 30 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 30 (expr -> expr TIMES expr .)
    LT              reduce using rule 30 (expr -> expr TIMES expr .)
    GT              reduce using rule 30 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 30 (expr -> expr TIMES expr .)
    NE              reduce using rule 30 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 30 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! DIVIDE          [ shift and go to state 59 ]


state 75

    (31) expr -> expr DIVIDE expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 31 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 31 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 31 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 31 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 31 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 31 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 31 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 31 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 31 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 31 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! DIVIDE          [ shift and go to state 59 ]


state 76

    (33) expr -> LPAREN ID RPAREN .

    SCOLON          reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    PLUS            reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    MINUS           reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    TIMES           reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    DIVIDE          reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    LT              reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    GT              reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    EQUALS          reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    NE              reduce using rule 33 (expr -> LPAREN ID RPAREN .)
    RPAREN          reduce using rule 33 (expr -> LPAREN ID RPAREN .)


state 77

    (35) expr -> LPAREN cte RPAREN .

    SCOLON          reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    PLUS            reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    MINUS           reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    TIMES           reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    DIVIDE          reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    LT              reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    GT              reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    EQUALS          reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    NE              reduce using rule 35 (expr -> LPAREN cte RPAREN .)
    RPAREN          reduce using rule 35 (expr -> LPAREN cte RPAREN .)


state 78

    (36) expr -> LPAREN expr RPAREN .

    SCOLON          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 36 (expr -> LPAREN expr RPAREN .)


state 79

    (45) condition -> IF LPAREN relexprcond RPAREN body . else body SCOLON
    (46) condition -> IF LPAREN relexprcond RPAREN body . ifend
    (47) else -> . ELSE
    (48) ifend -> . SCOLON

    ELSE            shift and go to state 91
    SCOLON          shift and go to state 89

    else                           shift and go to state 88
    ifend                          shift and go to state 90

state 80

    (37) relexprcond -> expr LT expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 37 (relexprcond -> expr LT expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 81

    (38) relexprcond -> expr GT expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 38 (relexprcond -> expr GT expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 82

    (39) relexprcond -> expr EQUALS expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 39 (relexprcond -> expr EQUALS expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 83

    (40) relexprcond -> expr NE expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 40 (relexprcond -> expr NE expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 84

    (26) cycle -> do body WHILE LPAREN relexprcycle . RPAREN SCOLON

    RPAREN          shift and go to state 92


state 85

    (41) relexprcycle -> expr . LT expr
    (42) relexprcycle -> expr . GT expr
    (43) relexprcycle -> expr . EQUALS expr
    (44) relexprcycle -> expr . NE expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    LT              shift and go to state 93
    GT              shift and go to state 94
    EQUALS          shift and go to state 95
    NE              shift and go to state 96
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 86

    (17) print -> COUT LPAREN listedexpr RPAREN SCOLON .

    ID              reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    IF              reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    COUT            reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    DO              reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    RBRACE          reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)


state 87

    (19) listedexpr -> c COMMA c . m
    (23) m -> . COMMA c m
    (24) m -> . empty
    (51) empty -> .

    COMMA           shift and go to state 97
    RPAREN          reduce using rule 51 (empty -> .)

    m                              shift and go to state 98
    empty                          shift and go to state 99

state 88

    (45) condition -> IF LPAREN relexprcond RPAREN body else . body SCOLON
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 100

state 89

    (48) ifend -> SCOLON .

    ID              reduce using rule 48 (ifend -> SCOLON .)
    IF              reduce using rule 48 (ifend -> SCOLON .)
    COUT            reduce using rule 48 (ifend -> SCOLON .)
    DO              reduce using rule 48 (ifend -> SCOLON .)
    RBRACE          reduce using rule 48 (ifend -> SCOLON .)


state 90

    (46) condition -> IF LPAREN relexprcond RPAREN body ifend .

    ID              reduce using rule 46 (condition -> IF LPAREN relexprcond RPAREN body ifend .)
    IF              reduce using rule 46 (condition -> IF LPAREN relexprcond RPAREN body ifend .)
    COUT            reduce using rule 46 (condition -> IF LPAREN relexprcond RPAREN body ifend .)
    DO              reduce using rule 46 (condition -> IF LPAREN relexprcond RPAREN body ifend .)
    RBRACE          reduce using rule 46 (condition -> IF LPAREN relexprcond RPAREN body ifend .)


state 91

    (47) else -> ELSE .

    LBRACE          reduce using rule 47 (else -> ELSE .)


state 92

    (26) cycle -> do body WHILE LPAREN relexprcycle RPAREN . SCOLON

    SCOLON          shift and go to state 101


state 93

    (41) relexprcycle -> expr LT . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 102
    cte                            shift and go to state 43

state 94

    (42) relexprcycle -> expr GT . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 103
    cte                            shift and go to state 43

state 95

    (43) relexprcycle -> expr EQUALS . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 104
    cte                            shift and go to state 43

state 96

    (44) relexprcycle -> expr NE . expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr TIMES expr
    (31) expr -> . expr DIVIDE expr
    (32) expr -> . ID
    (33) expr -> . LPAREN ID RPAREN
    (34) expr -> . cte
    (35) expr -> . LPAREN cte RPAREN
    (36) expr -> . LPAREN expr RPAREN
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 40
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    expr                           shift and go to state 105
    cte                            shift and go to state 43

state 97

    (23) m -> COMMA . c m
    (20) c -> . ID
    (21) c -> . cte
    (22) c -> . CTESTRING
    (49) cte -> . CTEINT
    (50) cte -> . CTEFLOAT

    ID              shift and go to state 51
    CTESTRING       shift and go to state 53
    CTEINT          shift and go to state 44
    CTEFLOAT        shift and go to state 45

    c                              shift and go to state 106
    cte                            shift and go to state 52

state 98

    (19) listedexpr -> c COMMA c m .

    RPAREN          reduce using rule 19 (listedexpr -> c COMMA c m .)


state 99

    (24) m -> empty .

    RPAREN          reduce using rule 24 (m -> empty .)


state 100

    (45) condition -> IF LPAREN relexprcond RPAREN body else body . SCOLON

    SCOLON          shift and go to state 107


state 101

    (26) cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON .

    ID              reduce using rule 26 (cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON .)
    IF              reduce using rule 26 (cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON .)
    COUT            reduce using rule 26 (cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON .)
    DO              reduce using rule 26 (cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON .)
    RBRACE          reduce using rule 26 (cycle -> do body WHILE LPAREN relexprcycle RPAREN SCOLON .)


state 102

    (41) relexprcycle -> expr LT expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 41 (relexprcycle -> expr LT expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 103

    (42) relexprcycle -> expr GT expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 42 (relexprcycle -> expr GT expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 104

    (43) relexprcycle -> expr EQUALS expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 43 (relexprcycle -> expr EQUALS expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 105

    (44) relexprcycle -> expr NE expr .
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . TIMES expr
    (31) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 44 (relexprcycle -> expr NE expr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59


state 106

    (23) m -> COMMA c . m
    (23) m -> . COMMA c m
    (24) m -> . empty
    (51) empty -> .

    COMMA           shift and go to state 97
    RPAREN          reduce using rule 51 (empty -> .)

    m                              shift and go to state 108
    empty                          shift and go to state 99

state 107

    (45) condition -> IF LPAREN relexprcond RPAREN body else body SCOLON .

    ID              reduce using rule 45 (condition -> IF LPAREN relexprcond RPAREN body else body SCOLON .)
    IF              reduce using rule 45 (condition -> IF LPAREN relexprcond RPAREN body else body SCOLON .)
    COUT            reduce using rule 45 (condition -> IF LPAREN relexprcond RPAREN body else body SCOLON .)
    DO              reduce using rule 45 (condition -> IF LPAREN relexprcond RPAREN body else body SCOLON .)
    RBRACE          reduce using rule 45 (condition -> IF LPAREN relexprcond RPAREN body else body SCOLON .)


state 108

    (23) m -> COMMA c m .

    RPAREN          reduce using rule 23 (m -> COMMA c m .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 60 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 61 resolved as shift
