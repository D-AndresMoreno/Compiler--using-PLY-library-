Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SCOLON vars body END
Rule 2     vars -> VAR typed_vars vars
Rule 3     vars -> empty
Rule 4     typed_vars -> vars_list COLON type SCOLON typed_vars
Rule 5     typed_vars -> empty
Rule 6     vars_list -> ID
Rule 7     vars_list -> ID COMMA vars_list
Rule 8     type -> INTEGER
Rule 9     type -> FLOAT
Rule 10    body -> LBRACE listofstatements RBRACE
Rule 11    listofstatements -> statement listofstatements
Rule 12    listofstatements -> empty
Rule 13    statement -> assign
Rule 14    statement -> condition
Rule 15    statement -> cycle
Rule 16    statement -> print
Rule 17    print -> COUT LPAREN listedexpr RPAREN SCOLON
Rule 18    listedexpr -> c
Rule 19    listedexpr -> c COMMA c m
Rule 20    c -> expr
Rule 21    c -> relexpr
Rule 22    c -> CTESTRING
Rule 23    m -> COMMA c m
Rule 24    m -> empty
Rule 25    assign -> ID EQUALS expr SCOLON
Rule 26    cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON
Rule 27    expr -> expr PLUS expr
Rule 28    expr -> expr MINUS expr
Rule 29    expr -> expr TIMES expr
Rule 30    expr -> expr DIVIDE expr
Rule 31    expr -> ID
Rule 32    expr -> cte
Rule 33    expr -> LPAREN expr RPAREN
Rule 34    relexpr -> expr LT expr
Rule 35    relexpr -> expr GT expr
Rule 36    relexpr -> expr EQUALS expr
Rule 37    relexpr -> expr NE expr
Rule 38    condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON
Rule 39    condition -> IF LPAREN relexpr RPAREN body SCOLON
Rule 40    cte -> CTEINT
Rule 41    cte -> CTEFLOAT
Rule 42    empty -> <empty>

Terminals, with rules where they appear

COLON                : 4
COMMA                : 7 19 23
COUT                 : 17
CTEFLOAT             : 41
CTEINT               : 40
CTESTRING            : 22
DIVIDE               : 30
DO                   : 26
ELSE                 : 38
END                  : 1
EQUALS               : 25 36
FLOAT                : 9
GT                   : 35
ID                   : 1 6 7 25 31
IF                   : 38 39
INTEGER              : 8
LBRACE               : 10
LPAREN               : 17 26 33 38 39
LT                   : 34
MINUS                : 28
NE                   : 37
PLUS                 : 27
PROGRAM              : 1
RBRACE               : 10
RPAREN               : 17 26 33 38 39
SCOLON               : 1 4 17 25 26 38 39
TIMES                : 29
VAR                  : 2
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

assign               : 13
body                 : 1 26 38 38 39
c                    : 18 19 19 23
condition            : 14
cte                  : 32
cycle                : 15
empty                : 3 5 12 24
expr                 : 20 25 27 27 28 28 29 29 30 30 33 34 34 35 35 36 36 37 37
listedexpr           : 17
listofstatements     : 10 11
m                    : 19 23
print                : 16
programa             : 0
relexpr              : 21 26 38 39
statement            : 11
type                 : 4
typed_vars           : 2 4
vars                 : 1 2
vars_list            : 4 7

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SCOLON vars body END

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SCOLON vars body END

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SCOLON vars body END

    SCOLON          shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SCOLON . vars body END
    (2) vars -> . VAR typed_vars vars
    (3) vars -> . empty
    (42) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 42 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SCOLON vars . body END
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 8

state 6

    (2) vars -> VAR . typed_vars vars
    (4) typed_vars -> . vars_list COLON type SCOLON typed_vars
    (5) typed_vars -> . empty
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list
    (42) empty -> .

    ID              shift and go to state 13
    VAR             reduce using rule 42 (empty -> .)
    LBRACE          reduce using rule 42 (empty -> .)

    typed_vars                     shift and go to state 10
    vars_list                      shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) vars -> empty .

    LBRACE          reduce using rule 3 (vars -> empty .)


state 8

    (1) programa -> PROGRAM ID SCOLON vars body . END

    END             shift and go to state 14


state 9

    (10) body -> LBRACE . listofstatements RBRACE
    (11) listofstatements -> . statement listofstatements
    (12) listofstatements -> . empty
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (42) empty -> .
    (25) assign -> . ID EQUALS expr SCOLON
    (38) condition -> . IF LPAREN relexpr RPAREN body ELSE body SCOLON
    (39) condition -> . IF LPAREN relexpr RPAREN body SCOLON
    (26) cycle -> . DO body WHILE LPAREN relexpr RPAREN SCOLON
    (17) print -> . COUT LPAREN listedexpr RPAREN SCOLON

    RBRACE          reduce using rule 42 (empty -> .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    DO              shift and go to state 24
    COUT            shift and go to state 25

    listofstatements               shift and go to state 15
    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 19
    cycle                          shift and go to state 20
    print                          shift and go to state 21

state 10

    (2) vars -> VAR typed_vars . vars
    (2) vars -> . VAR typed_vars vars
    (3) vars -> . empty
    (42) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 42 (empty -> .)

    vars                           shift and go to state 26
    empty                          shift and go to state 7

state 11

    (4) typed_vars -> vars_list . COLON type SCOLON typed_vars

    COLON           shift and go to state 27


state 12

    (5) typed_vars -> empty .

    VAR             reduce using rule 5 (typed_vars -> empty .)
    LBRACE          reduce using rule 5 (typed_vars -> empty .)


state 13

    (6) vars_list -> ID .
    (7) vars_list -> ID . COMMA vars_list

    COLON           reduce using rule 6 (vars_list -> ID .)
    COMMA           shift and go to state 28


state 14

    (1) programa -> PROGRAM ID SCOLON vars body END .

    $end            reduce using rule 1 (programa -> PROGRAM ID SCOLON vars body END .)


state 15

    (10) body -> LBRACE listofstatements . RBRACE

    RBRACE          shift and go to state 29


state 16

    (11) listofstatements -> statement . listofstatements
    (11) listofstatements -> . statement listofstatements
    (12) listofstatements -> . empty
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (42) empty -> .
    (25) assign -> . ID EQUALS expr SCOLON
    (38) condition -> . IF LPAREN relexpr RPAREN body ELSE body SCOLON
    (39) condition -> . IF LPAREN relexpr RPAREN body SCOLON
    (26) cycle -> . DO body WHILE LPAREN relexpr RPAREN SCOLON
    (17) print -> . COUT LPAREN listedexpr RPAREN SCOLON

    RBRACE          reduce using rule 42 (empty -> .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    DO              shift and go to state 24
    COUT            shift and go to state 25

    statement                      shift and go to state 16
    listofstatements               shift and go to state 30
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 19
    cycle                          shift and go to state 20
    print                          shift and go to state 21

state 17

    (12) listofstatements -> empty .

    RBRACE          reduce using rule 12 (listofstatements -> empty .)


state 18

    (13) statement -> assign .

    ID              reduce using rule 13 (statement -> assign .)
    IF              reduce using rule 13 (statement -> assign .)
    DO              reduce using rule 13 (statement -> assign .)
    COUT            reduce using rule 13 (statement -> assign .)
    RBRACE          reduce using rule 13 (statement -> assign .)


state 19

    (14) statement -> condition .

    ID              reduce using rule 14 (statement -> condition .)
    IF              reduce using rule 14 (statement -> condition .)
    DO              reduce using rule 14 (statement -> condition .)
    COUT            reduce using rule 14 (statement -> condition .)
    RBRACE          reduce using rule 14 (statement -> condition .)


state 20

    (15) statement -> cycle .

    ID              reduce using rule 15 (statement -> cycle .)
    IF              reduce using rule 15 (statement -> cycle .)
    DO              reduce using rule 15 (statement -> cycle .)
    COUT            reduce using rule 15 (statement -> cycle .)
    RBRACE          reduce using rule 15 (statement -> cycle .)


state 21

    (16) statement -> print .

    ID              reduce using rule 16 (statement -> print .)
    IF              reduce using rule 16 (statement -> print .)
    DO              reduce using rule 16 (statement -> print .)
    COUT            reduce using rule 16 (statement -> print .)
    RBRACE          reduce using rule 16 (statement -> print .)


state 22

    (25) assign -> ID . EQUALS expr SCOLON

    EQUALS          shift and go to state 31


state 23

    (38) condition -> IF . LPAREN relexpr RPAREN body ELSE body SCOLON
    (39) condition -> IF . LPAREN relexpr RPAREN body SCOLON

    LPAREN          shift and go to state 32


state 24

    (26) cycle -> DO . body WHILE LPAREN relexpr RPAREN SCOLON
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 33

state 25

    (17) print -> COUT . LPAREN listedexpr RPAREN SCOLON

    LPAREN          shift and go to state 34


state 26

    (2) vars -> VAR typed_vars vars .

    LBRACE          reduce using rule 2 (vars -> VAR typed_vars vars .)


state 27

    (4) typed_vars -> vars_list COLON . type SCOLON typed_vars
    (8) type -> . INTEGER
    (9) type -> . FLOAT

    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37

    type                           shift and go to state 35

state 28

    (7) vars_list -> ID COMMA . vars_list
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list

    ID              shift and go to state 13

    vars_list                      shift and go to state 38

state 29

    (10) body -> LBRACE listofstatements RBRACE .

    END             reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)
    WHILE           reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)
    ELSE            reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)
    SCOLON          reduce using rule 10 (body -> LBRACE listofstatements RBRACE .)


state 30

    (11) listofstatements -> statement listofstatements .

    RBRACE          reduce using rule 11 (listofstatements -> statement listofstatements .)


state 31

    (25) assign -> ID EQUALS . expr SCOLON
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 40
    cte                            shift and go to state 41

state 32

    (38) condition -> IF LPAREN . relexpr RPAREN body ELSE body SCOLON
    (39) condition -> IF LPAREN . relexpr RPAREN body SCOLON
    (34) relexpr -> . expr LT expr
    (35) relexpr -> . expr GT expr
    (36) relexpr -> . expr EQUALS expr
    (37) relexpr -> . expr NE expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    relexpr                        shift and go to state 45
    expr                           shift and go to state 46
    cte                            shift and go to state 41

state 33

    (26) cycle -> DO body . WHILE LPAREN relexpr RPAREN SCOLON

    WHILE           shift and go to state 47


state 34

    (17) print -> COUT LPAREN . listedexpr RPAREN SCOLON
    (18) listedexpr -> . c
    (19) listedexpr -> . c COMMA c m
    (20) c -> . expr
    (21) c -> . relexpr
    (22) c -> . CTESTRING
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (34) relexpr -> . expr LT expr
    (35) relexpr -> . expr GT expr
    (36) relexpr -> . expr EQUALS expr
    (37) relexpr -> . expr NE expr
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    CTESTRING       shift and go to state 52
    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    listedexpr                     shift and go to state 48
    c                              shift and go to state 49
    expr                           shift and go to state 50
    relexpr                        shift and go to state 51
    cte                            shift and go to state 41

state 35

    (4) typed_vars -> vars_list COLON type . SCOLON typed_vars

    SCOLON          shift and go to state 53


state 36

    (8) type -> INTEGER .

    SCOLON          reduce using rule 8 (type -> INTEGER .)


state 37

    (9) type -> FLOAT .

    SCOLON          reduce using rule 9 (type -> FLOAT .)


state 38

    (7) vars_list -> ID COMMA vars_list .

    COLON           reduce using rule 7 (vars_list -> ID COMMA vars_list .)


state 39

    (31) expr -> ID .

    SCOLON          reduce using rule 31 (expr -> ID .)
    PLUS            reduce using rule 31 (expr -> ID .)
    MINUS           reduce using rule 31 (expr -> ID .)
    TIMES           reduce using rule 31 (expr -> ID .)
    DIVIDE          reduce using rule 31 (expr -> ID .)
    LT              reduce using rule 31 (expr -> ID .)
    GT              reduce using rule 31 (expr -> ID .)
    EQUALS          reduce using rule 31 (expr -> ID .)
    NE              reduce using rule 31 (expr -> ID .)
    COMMA           reduce using rule 31 (expr -> ID .)
    RPAREN          reduce using rule 31 (expr -> ID .)


state 40

    (25) assign -> ID EQUALS expr . SCOLON
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    SCOLON          shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 41

    (32) expr -> cte .

    SCOLON          reduce using rule 32 (expr -> cte .)
    PLUS            reduce using rule 32 (expr -> cte .)
    MINUS           reduce using rule 32 (expr -> cte .)
    TIMES           reduce using rule 32 (expr -> cte .)
    DIVIDE          reduce using rule 32 (expr -> cte .)
    LT              reduce using rule 32 (expr -> cte .)
    GT              reduce using rule 32 (expr -> cte .)
    EQUALS          reduce using rule 32 (expr -> cte .)
    NE              reduce using rule 32 (expr -> cte .)
    COMMA           reduce using rule 32 (expr -> cte .)
    RPAREN          reduce using rule 32 (expr -> cte .)


state 42

    (33) expr -> LPAREN . expr RPAREN
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 59
    cte                            shift and go to state 41

state 43

    (40) cte -> CTEINT .

    SCOLON          reduce using rule 40 (cte -> CTEINT .)
    PLUS            reduce using rule 40 (cte -> CTEINT .)
    MINUS           reduce using rule 40 (cte -> CTEINT .)
    TIMES           reduce using rule 40 (cte -> CTEINT .)
    DIVIDE          reduce using rule 40 (cte -> CTEINT .)
    LT              reduce using rule 40 (cte -> CTEINT .)
    GT              reduce using rule 40 (cte -> CTEINT .)
    EQUALS          reduce using rule 40 (cte -> CTEINT .)
    NE              reduce using rule 40 (cte -> CTEINT .)
    COMMA           reduce using rule 40 (cte -> CTEINT .)
    RPAREN          reduce using rule 40 (cte -> CTEINT .)


state 44

    (41) cte -> CTEFLOAT .

    SCOLON          reduce using rule 41 (cte -> CTEFLOAT .)
    PLUS            reduce using rule 41 (cte -> CTEFLOAT .)
    MINUS           reduce using rule 41 (cte -> CTEFLOAT .)
    TIMES           reduce using rule 41 (cte -> CTEFLOAT .)
    DIVIDE          reduce using rule 41 (cte -> CTEFLOAT .)
    LT              reduce using rule 41 (cte -> CTEFLOAT .)
    GT              reduce using rule 41 (cte -> CTEFLOAT .)
    EQUALS          reduce using rule 41 (cte -> CTEFLOAT .)
    NE              reduce using rule 41 (cte -> CTEFLOAT .)
    COMMA           reduce using rule 41 (cte -> CTEFLOAT .)
    RPAREN          reduce using rule 41 (cte -> CTEFLOAT .)


state 45

    (38) condition -> IF LPAREN relexpr . RPAREN body ELSE body SCOLON
    (39) condition -> IF LPAREN relexpr . RPAREN body SCOLON

    RPAREN          shift and go to state 60


state 46

    (34) relexpr -> expr . LT expr
    (35) relexpr -> expr . GT expr
    (36) relexpr -> expr . EQUALS expr
    (37) relexpr -> expr . NE expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    LT              shift and go to state 61
    GT              shift and go to state 62
    EQUALS          shift and go to state 63
    NE              shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 47

    (26) cycle -> DO body WHILE . LPAREN relexpr RPAREN SCOLON

    LPAREN          shift and go to state 65


state 48

    (17) print -> COUT LPAREN listedexpr . RPAREN SCOLON

    RPAREN          shift and go to state 66


state 49

    (18) listedexpr -> c .
    (19) listedexpr -> c . COMMA c m

    RPAREN          reduce using rule 18 (listedexpr -> c .)
    COMMA           shift and go to state 67


state 50

    (20) c -> expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr
    (34) relexpr -> expr . LT expr
    (35) relexpr -> expr . GT expr
    (36) relexpr -> expr . EQUALS expr
    (37) relexpr -> expr . NE expr

    COMMA           reduce using rule 20 (c -> expr .)
    RPAREN          reduce using rule 20 (c -> expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    LT              shift and go to state 61
    GT              shift and go to state 62
    EQUALS          shift and go to state 63
    NE              shift and go to state 64


state 51

    (21) c -> relexpr .

    COMMA           reduce using rule 21 (c -> relexpr .)
    RPAREN          reduce using rule 21 (c -> relexpr .)


state 52

    (22) c -> CTESTRING .

    COMMA           reduce using rule 22 (c -> CTESTRING .)
    RPAREN          reduce using rule 22 (c -> CTESTRING .)


state 53

    (4) typed_vars -> vars_list COLON type SCOLON . typed_vars
    (4) typed_vars -> . vars_list COLON type SCOLON typed_vars
    (5) typed_vars -> . empty
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list
    (42) empty -> .

    ID              shift and go to state 13
    VAR             reduce using rule 42 (empty -> .)
    LBRACE          reduce using rule 42 (empty -> .)

    vars_list                      shift and go to state 11
    typed_vars                     shift and go to state 68
    empty                          shift and go to state 12

state 54

    (25) assign -> ID EQUALS expr SCOLON .

    ID              reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    IF              reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    DO              reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    COUT            reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)
    RBRACE          reduce using rule 25 (assign -> ID EQUALS expr SCOLON .)


state 55

    (27) expr -> expr PLUS . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 69
    cte                            shift and go to state 41

state 56

    (28) expr -> expr MINUS . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 70
    cte                            shift and go to state 41

state 57

    (29) expr -> expr TIMES . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 71
    cte                            shift and go to state 41

state 58

    (30) expr -> expr DIVIDE . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 72
    cte                            shift and go to state 41

state 59

    (33) expr -> LPAREN expr . RPAREN
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    RPAREN          shift and go to state 73
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 60

    (38) condition -> IF LPAREN relexpr RPAREN . body ELSE body SCOLON
    (39) condition -> IF LPAREN relexpr RPAREN . body SCOLON
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 74

state 61

    (34) relexpr -> expr LT . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 75
    cte                            shift and go to state 41

state 62

    (35) relexpr -> expr GT . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 76
    cte                            shift and go to state 41

state 63

    (36) relexpr -> expr EQUALS . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 77
    cte                            shift and go to state 41

state 64

    (37) relexpr -> expr NE . expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    expr                           shift and go to state 78
    cte                            shift and go to state 41

state 65

    (26) cycle -> DO body WHILE LPAREN . relexpr RPAREN SCOLON
    (34) relexpr -> . expr LT expr
    (35) relexpr -> . expr GT expr
    (36) relexpr -> . expr EQUALS expr
    (37) relexpr -> . expr NE expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    relexpr                        shift and go to state 79
    expr                           shift and go to state 46
    cte                            shift and go to state 41

state 66

    (17) print -> COUT LPAREN listedexpr RPAREN . SCOLON

    SCOLON          shift and go to state 80


state 67

    (19) listedexpr -> c COMMA . c m
    (20) c -> . expr
    (21) c -> . relexpr
    (22) c -> . CTESTRING
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (34) relexpr -> . expr LT expr
    (35) relexpr -> . expr GT expr
    (36) relexpr -> . expr EQUALS expr
    (37) relexpr -> . expr NE expr
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    CTESTRING       shift and go to state 52
    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    c                              shift and go to state 81
    expr                           shift and go to state 50
    relexpr                        shift and go to state 51
    cte                            shift and go to state 41

state 68

    (4) typed_vars -> vars_list COLON type SCOLON typed_vars .

    VAR             reduce using rule 4 (typed_vars -> vars_list COLON type SCOLON typed_vars .)
    LBRACE          reduce using rule 4 (typed_vars -> vars_list COLON type SCOLON typed_vars .)


state 69

    (27) expr -> expr PLUS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 27 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 27 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 27 (expr -> expr PLUS expr .)
    LT              reduce using rule 27 (expr -> expr PLUS expr .)
    GT              reduce using rule 27 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 27 (expr -> expr PLUS expr .)
    NE              reduce using rule 27 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 27 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 27 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58

  ! TIMES           [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]


state 70

    (28) expr -> expr MINUS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 28 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 28 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 28 (expr -> expr MINUS expr .)
    LT              reduce using rule 28 (expr -> expr MINUS expr .)
    GT              reduce using rule 28 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 28 (expr -> expr MINUS expr .)
    NE              reduce using rule 28 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 28 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 28 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58

  ! TIMES           [ reduce using rule 28 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]


state 71

    (29) expr -> expr TIMES expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 29 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 29 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 29 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 29 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 29 (expr -> expr TIMES expr .)
    LT              reduce using rule 29 (expr -> expr TIMES expr .)
    GT              reduce using rule 29 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 29 (expr -> expr TIMES expr .)
    NE              reduce using rule 29 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 29 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 29 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! TIMES           [ shift and go to state 57 ]
  ! DIVIDE          [ shift and go to state 58 ]


state 72

    (30) expr -> expr DIVIDE expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    SCOLON          reduce using rule 30 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 30 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 30 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 30 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 30 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 30 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 30 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 30 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 30 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 30 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 30 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! TIMES           [ shift and go to state 57 ]
  ! DIVIDE          [ shift and go to state 58 ]


state 73

    (33) expr -> LPAREN expr RPAREN .

    SCOLON          reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 33 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 33 (expr -> LPAREN expr RPAREN .)


state 74

    (38) condition -> IF LPAREN relexpr RPAREN body . ELSE body SCOLON
    (39) condition -> IF LPAREN relexpr RPAREN body . SCOLON

    ELSE            shift and go to state 82
    SCOLON          shift and go to state 83


state 75

    (34) relexpr -> expr LT expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 34 (relexpr -> expr LT expr .)
    COMMA           reduce using rule 34 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 76

    (35) relexpr -> expr GT expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 35 (relexpr -> expr GT expr .)
    COMMA           reduce using rule 35 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 77

    (36) relexpr -> expr EQUALS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 36 (relexpr -> expr EQUALS expr .)
    COMMA           reduce using rule 36 (relexpr -> expr EQUALS expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 78

    (37) relexpr -> expr NE expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 37 (relexpr -> expr NE expr .)
    COMMA           reduce using rule 37 (relexpr -> expr NE expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58


state 79

    (26) cycle -> DO body WHILE LPAREN relexpr . RPAREN SCOLON

    RPAREN          shift and go to state 84


state 80

    (17) print -> COUT LPAREN listedexpr RPAREN SCOLON .

    ID              reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    IF              reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    DO              reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    COUT            reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)
    RBRACE          reduce using rule 17 (print -> COUT LPAREN listedexpr RPAREN SCOLON .)


state 81

    (19) listedexpr -> c COMMA c . m
    (23) m -> . COMMA c m
    (24) m -> . empty
    (42) empty -> .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 42 (empty -> .)

    m                              shift and go to state 86
    empty                          shift and go to state 87

state 82

    (38) condition -> IF LPAREN relexpr RPAREN body ELSE . body SCOLON
    (10) body -> . LBRACE listofstatements RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 88

state 83

    (39) condition -> IF LPAREN relexpr RPAREN body SCOLON .

    ID              reduce using rule 39 (condition -> IF LPAREN relexpr RPAREN body SCOLON .)
    IF              reduce using rule 39 (condition -> IF LPAREN relexpr RPAREN body SCOLON .)
    DO              reduce using rule 39 (condition -> IF LPAREN relexpr RPAREN body SCOLON .)
    COUT            reduce using rule 39 (condition -> IF LPAREN relexpr RPAREN body SCOLON .)
    RBRACE          reduce using rule 39 (condition -> IF LPAREN relexpr RPAREN body SCOLON .)


state 84

    (26) cycle -> DO body WHILE LPAREN relexpr RPAREN . SCOLON

    SCOLON          shift and go to state 89


state 85

    (23) m -> COMMA . c m
    (20) c -> . expr
    (21) c -> . relexpr
    (22) c -> . CTESTRING
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIVIDE expr
    (31) expr -> . ID
    (32) expr -> . cte
    (33) expr -> . LPAREN expr RPAREN
    (34) relexpr -> . expr LT expr
    (35) relexpr -> . expr GT expr
    (36) relexpr -> . expr EQUALS expr
    (37) relexpr -> . expr NE expr
    (40) cte -> . CTEINT
    (41) cte -> . CTEFLOAT

    CTESTRING       shift and go to state 52
    ID              shift and go to state 39
    LPAREN          shift and go to state 42
    CTEINT          shift and go to state 43
    CTEFLOAT        shift and go to state 44

    c                              shift and go to state 90
    expr                           shift and go to state 50
    relexpr                        shift and go to state 51
    cte                            shift and go to state 41

state 86

    (19) listedexpr -> c COMMA c m .

    RPAREN          reduce using rule 19 (listedexpr -> c COMMA c m .)


state 87

    (24) m -> empty .

    RPAREN          reduce using rule 24 (m -> empty .)


state 88

    (38) condition -> IF LPAREN relexpr RPAREN body ELSE body . SCOLON

    SCOLON          shift and go to state 91


state 89

    (26) cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON .

    ID              reduce using rule 26 (cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON .)
    IF              reduce using rule 26 (cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON .)
    DO              reduce using rule 26 (cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON .)
    COUT            reduce using rule 26 (cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON .)
    RBRACE          reduce using rule 26 (cycle -> DO body WHILE LPAREN relexpr RPAREN SCOLON .)


state 90

    (23) m -> COMMA c . m
    (23) m -> . COMMA c m
    (24) m -> . empty
    (42) empty -> .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 42 (empty -> .)

    m                              shift and go to state 92
    empty                          shift and go to state 87

state 91

    (38) condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON .

    ID              reduce using rule 38 (condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON .)
    IF              reduce using rule 38 (condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON .)
    DO              reduce using rule 38 (condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON .)
    COUT            reduce using rule 38 (condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON .)
    RBRACE          reduce using rule 38 (condition -> IF LPAREN relexpr RPAREN body ELSE body SCOLON .)


state 92

    (23) m -> COMMA c m .

    RPAREN          reduce using rule 23 (m -> COMMA c m .)

