Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SCOLON vars body END
Rule 2     vars -> VAR typed_vars vars
Rule 3     vars -> empty
Rule 4     typed_vars -> vars_list COLON type SCOLON typed_vars
Rule 5     typed_vars -> empty
Rule 6     vars_list -> ID
Rule 7     vars_list -> ID COMMA vars_list
Rule 8     type -> INTEGER
Rule 9     type -> FLOAT
Rule 10    body -> LBRACE s RBRACE
Rule 11    s -> statement s
Rule 12    s -> empty
Rule 13    statement -> assign
Rule 14    statement -> condition
Rule 15    statement -> cycle
Rule 16    statement -> print
Rule 17    print -> COUT LPAREN c m RPAREN SCOLON
Rule 18    c -> expresion
Rule 19    c -> CTESTRING
Rule 20    m -> COMMA c m
Rule 21    m -> empty
Rule 22    assign -> ID EQUALS expresion SCOLON
Rule 23    cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON
Rule 24    expresion -> exp x
Rule 25    expresion -> exp
Rule 26    x -> GT exp
Rule 27    x -> LT exp
Rule 28    x -> NE exp
Rule 29    condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON
Rule 30    condition -> IF LPAREN expresion RPAREN body SCOLON
Rule 31    cte -> CTEINT
Rule 32    cte -> CTEFLOAT
Rule 33    factor -> LPAREN expresion RPAREN
Rule 34    factor -> factor_op ID
Rule 35    factor -> cte
Rule 36    factor_op -> PLUS
Rule 37    factor_op -> MINUS
Rule 38    exp -> termino z
Rule 39    z -> PLUS exp
Rule 40    z -> MINUS exp
Rule 41    z -> empty
Rule 42    termino -> factor y
Rule 43    y -> TIMES termino
Rule 44    y -> DIVIDE termino
Rule 45    y -> empty
Rule 46    empty -> <empty>

Terminals, with rules where they appear

COLON                : 4
COMMA                : 7 20
COUT                 : 17
CTEFLOAT             : 32
CTEINT               : 31
CTESTRING            : 19
DIVIDE               : 44
DO                   : 23
ELSE                 : 29
END                  : 1
EQUALS               : 22
FLOAT                : 9
GT                   : 26
ID                   : 1 6 7 22 34
IF                   : 29 30
INTEGER              : 8
LBRACE               : 10
LPAREN               : 17 23 29 30 33
LT                   : 27
MINUS                : 37 40
NE                   : 28
PLUS                 : 36 39
PROGRAM              : 1
RBRACE               : 10
RPAREN               : 17 23 29 30 33
SCOLON               : 1 4 17 22 23 29 30
TIMES                : 43
VAR                  : 2
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

assign               : 13
body                 : 1 23 29 29 30
c                    : 17 20
condition            : 14
cte                  : 35
cycle                : 15
empty                : 3 5 12 21 41 45
exp                  : 24 25 26 27 28 39 40
expresion            : 18 22 23 29 30 33
factor               : 42
factor_op            : 34
m                    : 17 20
print                : 16
programa             : 0
s                    : 10 11
statement            : 11
termino              : 38 43 44
type                 : 4
typed_vars           : 2 4
vars                 : 1 2
vars_list            : 4 7
x                    : 24
y                    : 42
z                    : 38

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SCOLON vars body END

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SCOLON vars body END

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SCOLON vars body END

    SCOLON          shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SCOLON . vars body END
    (2) vars -> . VAR typed_vars vars
    (3) vars -> . empty
    (46) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 46 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SCOLON vars . body END
    (10) body -> . LBRACE s RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 8

state 6

    (2) vars -> VAR . typed_vars vars
    (4) typed_vars -> . vars_list COLON type SCOLON typed_vars
    (5) typed_vars -> . empty
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list
    (46) empty -> .

    ID              shift and go to state 13
    VAR             reduce using rule 46 (empty -> .)
    LBRACE          reduce using rule 46 (empty -> .)

    typed_vars                     shift and go to state 10
    vars_list                      shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) vars -> empty .

    LBRACE          reduce using rule 3 (vars -> empty .)


state 8

    (1) programa -> PROGRAM ID SCOLON vars body . END

    END             shift and go to state 14


state 9

    (10) body -> LBRACE . s RBRACE
    (11) s -> . statement s
    (12) s -> . empty
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (46) empty -> .
    (22) assign -> . ID EQUALS expresion SCOLON
    (29) condition -> . IF LPAREN expresion RPAREN body ELSE body SCOLON
    (30) condition -> . IF LPAREN expresion RPAREN body SCOLON
    (23) cycle -> . DO body WHILE LPAREN expresion RPAREN SCOLON
    (17) print -> . COUT LPAREN c m RPAREN SCOLON

    RBRACE          reduce using rule 46 (empty -> .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    DO              shift and go to state 24
    COUT            shift and go to state 25

    s                              shift and go to state 15
    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 19
    cycle                          shift and go to state 20
    print                          shift and go to state 21

state 10

    (2) vars -> VAR typed_vars . vars
    (2) vars -> . VAR typed_vars vars
    (3) vars -> . empty
    (46) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 46 (empty -> .)

    vars                           shift and go to state 26
    empty                          shift and go to state 7

state 11

    (4) typed_vars -> vars_list . COLON type SCOLON typed_vars

    COLON           shift and go to state 27


state 12

    (5) typed_vars -> empty .

    VAR             reduce using rule 5 (typed_vars -> empty .)
    LBRACE          reduce using rule 5 (typed_vars -> empty .)


state 13

    (6) vars_list -> ID .
    (7) vars_list -> ID . COMMA vars_list

    COLON           reduce using rule 6 (vars_list -> ID .)
    COMMA           shift and go to state 28


state 14

    (1) programa -> PROGRAM ID SCOLON vars body END .

    $end            reduce using rule 1 (programa -> PROGRAM ID SCOLON vars body END .)


state 15

    (10) body -> LBRACE s . RBRACE

    RBRACE          shift and go to state 29


state 16

    (11) s -> statement . s
    (11) s -> . statement s
    (12) s -> . empty
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (46) empty -> .
    (22) assign -> . ID EQUALS expresion SCOLON
    (29) condition -> . IF LPAREN expresion RPAREN body ELSE body SCOLON
    (30) condition -> . IF LPAREN expresion RPAREN body SCOLON
    (23) cycle -> . DO body WHILE LPAREN expresion RPAREN SCOLON
    (17) print -> . COUT LPAREN c m RPAREN SCOLON

    RBRACE          reduce using rule 46 (empty -> .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    DO              shift and go to state 24
    COUT            shift and go to state 25

    statement                      shift and go to state 16
    s                              shift and go to state 30
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 19
    cycle                          shift and go to state 20
    print                          shift and go to state 21

state 17

    (12) s -> empty .

    RBRACE          reduce using rule 12 (s -> empty .)


state 18

    (13) statement -> assign .

    ID              reduce using rule 13 (statement -> assign .)
    IF              reduce using rule 13 (statement -> assign .)
    DO              reduce using rule 13 (statement -> assign .)
    COUT            reduce using rule 13 (statement -> assign .)
    RBRACE          reduce using rule 13 (statement -> assign .)


state 19

    (14) statement -> condition .

    ID              reduce using rule 14 (statement -> condition .)
    IF              reduce using rule 14 (statement -> condition .)
    DO              reduce using rule 14 (statement -> condition .)
    COUT            reduce using rule 14 (statement -> condition .)
    RBRACE          reduce using rule 14 (statement -> condition .)


state 20

    (15) statement -> cycle .

    ID              reduce using rule 15 (statement -> cycle .)
    IF              reduce using rule 15 (statement -> cycle .)
    DO              reduce using rule 15 (statement -> cycle .)
    COUT            reduce using rule 15 (statement -> cycle .)
    RBRACE          reduce using rule 15 (statement -> cycle .)


state 21

    (16) statement -> print .

    ID              reduce using rule 16 (statement -> print .)
    IF              reduce using rule 16 (statement -> print .)
    DO              reduce using rule 16 (statement -> print .)
    COUT            reduce using rule 16 (statement -> print .)
    RBRACE          reduce using rule 16 (statement -> print .)


state 22

    (22) assign -> ID . EQUALS expresion SCOLON

    EQUALS          shift and go to state 31


state 23

    (29) condition -> IF . LPAREN expresion RPAREN body ELSE body SCOLON
    (30) condition -> IF . LPAREN expresion RPAREN body SCOLON

    LPAREN          shift and go to state 32


state 24

    (23) cycle -> DO . body WHILE LPAREN expresion RPAREN SCOLON
    (10) body -> . LBRACE s RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 33

state 25

    (17) print -> COUT . LPAREN c m RPAREN SCOLON

    LPAREN          shift and go to state 34


state 26

    (2) vars -> VAR typed_vars vars .

    LBRACE          reduce using rule 2 (vars -> VAR typed_vars vars .)


state 27

    (4) typed_vars -> vars_list COLON . type SCOLON typed_vars
    (8) type -> . INTEGER
    (9) type -> . FLOAT

    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37

    type                           shift and go to state 35

state 28

    (7) vars_list -> ID COMMA . vars_list
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list

    ID              shift and go to state 13

    vars_list                      shift and go to state 38

state 29

    (10) body -> LBRACE s RBRACE .

    END             reduce using rule 10 (body -> LBRACE s RBRACE .)
    WHILE           reduce using rule 10 (body -> LBRACE s RBRACE .)
    ELSE            reduce using rule 10 (body -> LBRACE s RBRACE .)
    SCOLON          reduce using rule 10 (body -> LBRACE s RBRACE .)


state 30

    (11) s -> statement s .

    RBRACE          reduce using rule 11 (s -> statement s .)


state 31

    (22) assign -> ID EQUALS . expresion SCOLON
    (24) expresion -> . exp x
    (25) expresion -> . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    expresion                      shift and go to state 39
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 32

    (29) condition -> IF LPAREN . expresion RPAREN body ELSE body SCOLON
    (30) condition -> IF LPAREN . expresion RPAREN body SCOLON
    (24) expresion -> . exp x
    (25) expresion -> . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    expresion                      shift and go to state 50
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 33

    (23) cycle -> DO body . WHILE LPAREN expresion RPAREN SCOLON

    WHILE           shift and go to state 51


state 34

    (17) print -> COUT LPAREN . c m RPAREN SCOLON
    (18) c -> . expresion
    (19) c -> . CTESTRING
    (24) expresion -> . exp x
    (25) expresion -> . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    CTESTRING       shift and go to state 54
    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    c                              shift and go to state 52
    expresion                      shift and go to state 53
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 35

    (4) typed_vars -> vars_list COLON type . SCOLON typed_vars

    SCOLON          shift and go to state 55


state 36

    (8) type -> INTEGER .

    SCOLON          reduce using rule 8 (type -> INTEGER .)


state 37

    (9) type -> FLOAT .

    SCOLON          reduce using rule 9 (type -> FLOAT .)


state 38

    (7) vars_list -> ID COMMA vars_list .

    COLON           reduce using rule 7 (vars_list -> ID COMMA vars_list .)


state 39

    (22) assign -> ID EQUALS expresion . SCOLON

    SCOLON          shift and go to state 56


state 40

    (24) expresion -> exp . x
    (25) expresion -> exp .
    (26) x -> . GT exp
    (27) x -> . LT exp
    (28) x -> . NE exp

    SCOLON          reduce using rule 25 (expresion -> exp .)
    RPAREN          reduce using rule 25 (expresion -> exp .)
    COMMA           reduce using rule 25 (expresion -> exp .)
    GT              shift and go to state 58
    LT              shift and go to state 59
    NE              shift and go to state 60

    x                              shift and go to state 57

state 41

    (38) exp -> termino . z
    (39) z -> . PLUS exp
    (40) z -> . MINUS exp
    (41) z -> . empty
    (46) empty -> .

    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    GT              reduce using rule 46 (empty -> .)
    LT              reduce using rule 46 (empty -> .)
    NE              reduce using rule 46 (empty -> .)
    SCOLON          reduce using rule 46 (empty -> .)
    RPAREN          reduce using rule 46 (empty -> .)
    COMMA           reduce using rule 46 (empty -> .)

    z                              shift and go to state 61
    empty                          shift and go to state 64

state 42

    (42) termino -> factor . y
    (43) y -> . TIMES termino
    (44) y -> . DIVIDE termino
    (45) y -> . empty
    (46) empty -> .

    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    PLUS            reduce using rule 46 (empty -> .)
    MINUS           reduce using rule 46 (empty -> .)
    GT              reduce using rule 46 (empty -> .)
    LT              reduce using rule 46 (empty -> .)
    NE              reduce using rule 46 (empty -> .)
    SCOLON          reduce using rule 46 (empty -> .)
    RPAREN          reduce using rule 46 (empty -> .)
    COMMA           reduce using rule 46 (empty -> .)

    y                              shift and go to state 65
    empty                          shift and go to state 68

state 43

    (33) factor -> LPAREN . expresion RPAREN
    (24) expresion -> . exp x
    (25) expresion -> . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    expresion                      shift and go to state 69
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 44

    (34) factor -> factor_op . ID

    ID              shift and go to state 70


state 45

    (35) factor -> cte .

    TIMES           reduce using rule 35 (factor -> cte .)
    DIVIDE          reduce using rule 35 (factor -> cte .)
    PLUS            reduce using rule 35 (factor -> cte .)
    MINUS           reduce using rule 35 (factor -> cte .)
    GT              reduce using rule 35 (factor -> cte .)
    LT              reduce using rule 35 (factor -> cte .)
    NE              reduce using rule 35 (factor -> cte .)
    SCOLON          reduce using rule 35 (factor -> cte .)
    RPAREN          reduce using rule 35 (factor -> cte .)
    COMMA           reduce using rule 35 (factor -> cte .)


state 46

    (36) factor_op -> PLUS .

    ID              reduce using rule 36 (factor_op -> PLUS .)


state 47

    (37) factor_op -> MINUS .

    ID              reduce using rule 37 (factor_op -> MINUS .)


state 48

    (31) cte -> CTEINT .

    TIMES           reduce using rule 31 (cte -> CTEINT .)
    DIVIDE          reduce using rule 31 (cte -> CTEINT .)
    PLUS            reduce using rule 31 (cte -> CTEINT .)
    MINUS           reduce using rule 31 (cte -> CTEINT .)
    GT              reduce using rule 31 (cte -> CTEINT .)
    LT              reduce using rule 31 (cte -> CTEINT .)
    NE              reduce using rule 31 (cte -> CTEINT .)
    SCOLON          reduce using rule 31 (cte -> CTEINT .)
    RPAREN          reduce using rule 31 (cte -> CTEINT .)
    COMMA           reduce using rule 31 (cte -> CTEINT .)


state 49

    (32) cte -> CTEFLOAT .

    TIMES           reduce using rule 32 (cte -> CTEFLOAT .)
    DIVIDE          reduce using rule 32 (cte -> CTEFLOAT .)
    PLUS            reduce using rule 32 (cte -> CTEFLOAT .)
    MINUS           reduce using rule 32 (cte -> CTEFLOAT .)
    GT              reduce using rule 32 (cte -> CTEFLOAT .)
    LT              reduce using rule 32 (cte -> CTEFLOAT .)
    NE              reduce using rule 32 (cte -> CTEFLOAT .)
    SCOLON          reduce using rule 32 (cte -> CTEFLOAT .)
    RPAREN          reduce using rule 32 (cte -> CTEFLOAT .)
    COMMA           reduce using rule 32 (cte -> CTEFLOAT .)


state 50

    (29) condition -> IF LPAREN expresion . RPAREN body ELSE body SCOLON
    (30) condition -> IF LPAREN expresion . RPAREN body SCOLON

    RPAREN          shift and go to state 71


state 51

    (23) cycle -> DO body WHILE . LPAREN expresion RPAREN SCOLON

    LPAREN          shift and go to state 72


state 52

    (17) print -> COUT LPAREN c . m RPAREN SCOLON
    (20) m -> . COMMA c m
    (21) m -> . empty
    (46) empty -> .

    COMMA           shift and go to state 74
    RPAREN          reduce using rule 46 (empty -> .)

    m                              shift and go to state 73
    empty                          shift and go to state 75

state 53

    (18) c -> expresion .

    COMMA           reduce using rule 18 (c -> expresion .)
    RPAREN          reduce using rule 18 (c -> expresion .)


state 54

    (19) c -> CTESTRING .

    COMMA           reduce using rule 19 (c -> CTESTRING .)
    RPAREN          reduce using rule 19 (c -> CTESTRING .)


state 55

    (4) typed_vars -> vars_list COLON type SCOLON . typed_vars
    (4) typed_vars -> . vars_list COLON type SCOLON typed_vars
    (5) typed_vars -> . empty
    (6) vars_list -> . ID
    (7) vars_list -> . ID COMMA vars_list
    (46) empty -> .

    ID              shift and go to state 13
    VAR             reduce using rule 46 (empty -> .)
    LBRACE          reduce using rule 46 (empty -> .)

    vars_list                      shift and go to state 11
    typed_vars                     shift and go to state 76
    empty                          shift and go to state 12

state 56

    (22) assign -> ID EQUALS expresion SCOLON .

    ID              reduce using rule 22 (assign -> ID EQUALS expresion SCOLON .)
    IF              reduce using rule 22 (assign -> ID EQUALS expresion SCOLON .)
    DO              reduce using rule 22 (assign -> ID EQUALS expresion SCOLON .)
    COUT            reduce using rule 22 (assign -> ID EQUALS expresion SCOLON .)
    RBRACE          reduce using rule 22 (assign -> ID EQUALS expresion SCOLON .)


state 57

    (24) expresion -> exp x .

    SCOLON          reduce using rule 24 (expresion -> exp x .)
    RPAREN          reduce using rule 24 (expresion -> exp x .)
    COMMA           reduce using rule 24 (expresion -> exp x .)


state 58

    (26) x -> GT . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    exp                            shift and go to state 77
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 59

    (27) x -> LT . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    exp                            shift and go to state 78
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 60

    (28) x -> NE . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    exp                            shift and go to state 79
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 61

    (38) exp -> termino z .

    GT              reduce using rule 38 (exp -> termino z .)
    LT              reduce using rule 38 (exp -> termino z .)
    NE              reduce using rule 38 (exp -> termino z .)
    SCOLON          reduce using rule 38 (exp -> termino z .)
    RPAREN          reduce using rule 38 (exp -> termino z .)
    COMMA           reduce using rule 38 (exp -> termino z .)


state 62

    (39) z -> PLUS . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    exp                            shift and go to state 80
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 63

    (40) z -> MINUS . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    exp                            shift and go to state 81
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 64

    (41) z -> empty .

    GT              reduce using rule 41 (z -> empty .)
    LT              reduce using rule 41 (z -> empty .)
    NE              reduce using rule 41 (z -> empty .)
    SCOLON          reduce using rule 41 (z -> empty .)
    RPAREN          reduce using rule 41 (z -> empty .)
    COMMA           reduce using rule 41 (z -> empty .)


state 65

    (42) termino -> factor y .

    PLUS            reduce using rule 42 (termino -> factor y .)
    MINUS           reduce using rule 42 (termino -> factor y .)
    GT              reduce using rule 42 (termino -> factor y .)
    LT              reduce using rule 42 (termino -> factor y .)
    NE              reduce using rule 42 (termino -> factor y .)
    SCOLON          reduce using rule 42 (termino -> factor y .)
    RPAREN          reduce using rule 42 (termino -> factor y .)
    COMMA           reduce using rule 42 (termino -> factor y .)


state 66

    (43) y -> TIMES . termino
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    termino                        shift and go to state 82
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 67

    (44) y -> DIVIDE . termino
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    termino                        shift and go to state 83
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 68

    (45) y -> empty .

    PLUS            reduce using rule 45 (y -> empty .)
    MINUS           reduce using rule 45 (y -> empty .)
    GT              reduce using rule 45 (y -> empty .)
    LT              reduce using rule 45 (y -> empty .)
    NE              reduce using rule 45 (y -> empty .)
    SCOLON          reduce using rule 45 (y -> empty .)
    RPAREN          reduce using rule 45 (y -> empty .)
    COMMA           reduce using rule 45 (y -> empty .)


state 69

    (33) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 84


state 70

    (34) factor -> factor_op ID .

    TIMES           reduce using rule 34 (factor -> factor_op ID .)
    DIVIDE          reduce using rule 34 (factor -> factor_op ID .)
    PLUS            reduce using rule 34 (factor -> factor_op ID .)
    MINUS           reduce using rule 34 (factor -> factor_op ID .)
    GT              reduce using rule 34 (factor -> factor_op ID .)
    LT              reduce using rule 34 (factor -> factor_op ID .)
    NE              reduce using rule 34 (factor -> factor_op ID .)
    SCOLON          reduce using rule 34 (factor -> factor_op ID .)
    RPAREN          reduce using rule 34 (factor -> factor_op ID .)
    COMMA           reduce using rule 34 (factor -> factor_op ID .)


state 71

    (29) condition -> IF LPAREN expresion RPAREN . body ELSE body SCOLON
    (30) condition -> IF LPAREN expresion RPAREN . body SCOLON
    (10) body -> . LBRACE s RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 85

state 72

    (23) cycle -> DO body WHILE LPAREN . expresion RPAREN SCOLON
    (24) expresion -> . exp x
    (25) expresion -> . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    expresion                      shift and go to state 86
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 73

    (17) print -> COUT LPAREN c m . RPAREN SCOLON

    RPAREN          shift and go to state 87


state 74

    (20) m -> COMMA . c m
    (18) c -> . expresion
    (19) c -> . CTESTRING
    (24) expresion -> . exp x
    (25) expresion -> . exp
    (38) exp -> . termino z
    (42) termino -> . factor y
    (33) factor -> . LPAREN expresion RPAREN
    (34) factor -> . factor_op ID
    (35) factor -> . cte
    (36) factor_op -> . PLUS
    (37) factor_op -> . MINUS
    (31) cte -> . CTEINT
    (32) cte -> . CTEFLOAT

    CTESTRING       shift and go to state 54
    LPAREN          shift and go to state 43
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    CTEINT          shift and go to state 48
    CTEFLOAT        shift and go to state 49

    c                              shift and go to state 88
    expresion                      shift and go to state 53
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factor_op                      shift and go to state 44
    cte                            shift and go to state 45

state 75

    (21) m -> empty .

    RPAREN          reduce using rule 21 (m -> empty .)


state 76

    (4) typed_vars -> vars_list COLON type SCOLON typed_vars .

    VAR             reduce using rule 4 (typed_vars -> vars_list COLON type SCOLON typed_vars .)
    LBRACE          reduce using rule 4 (typed_vars -> vars_list COLON type SCOLON typed_vars .)


state 77

    (26) x -> GT exp .

    SCOLON          reduce using rule 26 (x -> GT exp .)
    RPAREN          reduce using rule 26 (x -> GT exp .)
    COMMA           reduce using rule 26 (x -> GT exp .)


state 78

    (27) x -> LT exp .

    SCOLON          reduce using rule 27 (x -> LT exp .)
    RPAREN          reduce using rule 27 (x -> LT exp .)
    COMMA           reduce using rule 27 (x -> LT exp .)


state 79

    (28) x -> NE exp .

    SCOLON          reduce using rule 28 (x -> NE exp .)
    RPAREN          reduce using rule 28 (x -> NE exp .)
    COMMA           reduce using rule 28 (x -> NE exp .)


state 80

    (39) z -> PLUS exp .

    GT              reduce using rule 39 (z -> PLUS exp .)
    LT              reduce using rule 39 (z -> PLUS exp .)
    NE              reduce using rule 39 (z -> PLUS exp .)
    SCOLON          reduce using rule 39 (z -> PLUS exp .)
    RPAREN          reduce using rule 39 (z -> PLUS exp .)
    COMMA           reduce using rule 39 (z -> PLUS exp .)


state 81

    (40) z -> MINUS exp .

    GT              reduce using rule 40 (z -> MINUS exp .)
    LT              reduce using rule 40 (z -> MINUS exp .)
    NE              reduce using rule 40 (z -> MINUS exp .)
    SCOLON          reduce using rule 40 (z -> MINUS exp .)
    RPAREN          reduce using rule 40 (z -> MINUS exp .)
    COMMA           reduce using rule 40 (z -> MINUS exp .)


state 82

    (43) y -> TIMES termino .

    PLUS            reduce using rule 43 (y -> TIMES termino .)
    MINUS           reduce using rule 43 (y -> TIMES termino .)
    GT              reduce using rule 43 (y -> TIMES termino .)
    LT              reduce using rule 43 (y -> TIMES termino .)
    NE              reduce using rule 43 (y -> TIMES termino .)
    SCOLON          reduce using rule 43 (y -> TIMES termino .)
    RPAREN          reduce using rule 43 (y -> TIMES termino .)
    COMMA           reduce using rule 43 (y -> TIMES termino .)


state 83

    (44) y -> DIVIDE termino .

    PLUS            reduce using rule 44 (y -> DIVIDE termino .)
    MINUS           reduce using rule 44 (y -> DIVIDE termino .)
    GT              reduce using rule 44 (y -> DIVIDE termino .)
    LT              reduce using rule 44 (y -> DIVIDE termino .)
    NE              reduce using rule 44 (y -> DIVIDE termino .)
    SCOLON          reduce using rule 44 (y -> DIVIDE termino .)
    RPAREN          reduce using rule 44 (y -> DIVIDE termino .)
    COMMA           reduce using rule 44 (y -> DIVIDE termino .)


state 84

    (33) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    GT              reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    LT              reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    NE              reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    SCOLON          reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 33 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 33 (factor -> LPAREN expresion RPAREN .)


state 85

    (29) condition -> IF LPAREN expresion RPAREN body . ELSE body SCOLON
    (30) condition -> IF LPAREN expresion RPAREN body . SCOLON

    ELSE            shift and go to state 89
    SCOLON          shift and go to state 90


state 86

    (23) cycle -> DO body WHILE LPAREN expresion . RPAREN SCOLON

    RPAREN          shift and go to state 91


state 87

    (17) print -> COUT LPAREN c m RPAREN . SCOLON

    SCOLON          shift and go to state 92


state 88

    (20) m -> COMMA c . m
    (20) m -> . COMMA c m
    (21) m -> . empty
    (46) empty -> .

    COMMA           shift and go to state 74
    RPAREN          reduce using rule 46 (empty -> .)

    m                              shift and go to state 93
    empty                          shift and go to state 75

state 89

    (29) condition -> IF LPAREN expresion RPAREN body ELSE . body SCOLON
    (10) body -> . LBRACE s RBRACE

    LBRACE          shift and go to state 9

    body                           shift and go to state 94

state 90

    (30) condition -> IF LPAREN expresion RPAREN body SCOLON .

    ID              reduce using rule 30 (condition -> IF LPAREN expresion RPAREN body SCOLON .)
    IF              reduce using rule 30 (condition -> IF LPAREN expresion RPAREN body SCOLON .)
    DO              reduce using rule 30 (condition -> IF LPAREN expresion RPAREN body SCOLON .)
    COUT            reduce using rule 30 (condition -> IF LPAREN expresion RPAREN body SCOLON .)
    RBRACE          reduce using rule 30 (condition -> IF LPAREN expresion RPAREN body SCOLON .)


state 91

    (23) cycle -> DO body WHILE LPAREN expresion RPAREN . SCOLON

    SCOLON          shift and go to state 95


state 92

    (17) print -> COUT LPAREN c m RPAREN SCOLON .

    ID              reduce using rule 17 (print -> COUT LPAREN c m RPAREN SCOLON .)
    IF              reduce using rule 17 (print -> COUT LPAREN c m RPAREN SCOLON .)
    DO              reduce using rule 17 (print -> COUT LPAREN c m RPAREN SCOLON .)
    COUT            reduce using rule 17 (print -> COUT LPAREN c m RPAREN SCOLON .)
    RBRACE          reduce using rule 17 (print -> COUT LPAREN c m RPAREN SCOLON .)


state 93

    (20) m -> COMMA c m .

    RPAREN          reduce using rule 20 (m -> COMMA c m .)


state 94

    (29) condition -> IF LPAREN expresion RPAREN body ELSE body . SCOLON

    SCOLON          shift and go to state 96


state 95

    (23) cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON .

    ID              reduce using rule 23 (cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON .)
    IF              reduce using rule 23 (cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON .)
    DO              reduce using rule 23 (cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON .)
    COUT            reduce using rule 23 (cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON .)
    RBRACE          reduce using rule 23 (cycle -> DO body WHILE LPAREN expresion RPAREN SCOLON .)


state 96

    (29) condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON .

    ID              reduce using rule 29 (condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON .)
    IF              reduce using rule 29 (condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON .)
    DO              reduce using rule 29 (condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON .)
    COUT            reduce using rule 29 (condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON .)
    RBRACE          reduce using rule 29 (condition -> IF LPAREN expresion RPAREN body ELSE body SCOLON .)

